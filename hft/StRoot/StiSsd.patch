From 50b2c93a5589eb45ee9d424bd354d7f86f28c1a2 Mon Sep 17 00:00:00 2001
From: Dmitri Smirnov <d.s@plexoos.com>
Date: Mon, 12 May 2014 11:33:07 -0400
Subject: [PATCH 01/10] Copied StSsd* files to StSst*. This is to ensure
 backward compatibility. Currently copied only StSsdDetectorBuilder

---
 StiSsd/StiSstDetectorBuilder.cxx | 250 +++++++++++++++++++++++++++++++++++++++
 StiSsd/StiSstDetectorBuilder.h   |  54 +++++++++
 2 files changed, 304 insertions(+)
 create mode 100644 StiSsd/StiSstDetectorBuilder.cxx
 create mode 100644 StiSsd/StiSstDetectorBuilder.h

diff --git a/StiSsd/StiSstDetectorBuilder.cxx b/StiSsd/StiSstDetectorBuilder.cxx
new file mode 100644
index 0000000..8000d7e
--- /dev/null
+++ b/StiSsd/StiSstDetectorBuilder.cxx
@@ -0,0 +1,250 @@
+// $Id$
+// 
+// $Log$
+// Revision 1.1  2014/06/06 21:15:44  smirnovd
+// Add patches for StSsdDbMaker and StiSsd
+//
+// Revision 1.36  2013/03/22 23:58:51  fisyak
+// Remove name[50]
+//
+// Revision 1.35  2011/04/22 22:00:39  fisyak
+// warn off
+//
+// Revision 1.34  2010/08/25 21:57:42  fisyak
+// Get rid off access to specfic detector tracking parameters which usage has been  disable since 2008/06/11
+//
+// Revision 1.33  2009/03/16 13:50:15  fisyak
+// Move out all Sti Chairs into StDetectorDb
+//
+// Revision 1.32  2008/08/12 20:54:40  fisyak
+// If StSsdBarrel does not exist then take SSD as dead material from whatever exist in GEANT
+//
+// Revision 1.31  2008/06/12 16:36:55  fisyak
+// Remove all SSD endcap volumes
+//
+// Revision 1.30  2008/06/11 22:04:39  fisyak
+// Add dead material
+//
+// Revision 1.29  2008/04/03 20:04:22  fisyak
+// Straighten out DB access via chairs
+//
+// Revision 1.28  2007/07/12 20:39:13  fisyak
+// Remove default errors for SSD
+//
+// Revision 1.27  2007/03/21 17:53:38  fisyak
+// make use for new StSsdBarrel
+//
+// Revision 1.26  2006/10/17 20:18:05  fisyak
+// Add handle when SVTT mother volume is missing
+//
+// Revision 1.25  2006/10/16 20:31:17  fisyak
+// Clean dependencies from Sti useless classes
+//
+// Revision 1.24  2006/10/09 15:47:59  fisyak
+// use Normal represantation, remove StiDedxCalculator
+//
+// Revision 1.23  2006/06/28 18:51:46  fisyak
+// Add loading of tracking and hit error parameters from DB
+//
+// Revision 1.22  2006/05/31 04:00:02  fisyak
+// remove SSD ladder mother volume
+//
+// Revision 1.21  2005/06/21 16:35:01  lmartin
+// DetectorBuilder updated with the correct methods from StSsdUtil
+//
+// Revision 1.20  2005/06/21 15:31:47  lmartin
+// CVS tags added
+//
+/*!
+ * \class StiSsdDetectorBuilder
+ * \author Christelle Roy
+ * \date 02/27/04
+ */
+
+#include <stdio.h>
+#include <assert.h>
+#include <map>
+using namespace std;
+#include <stdexcept>
+#include "StMessMgr.h"
+#include "StThreeVectorD.hh"
+#include "tables/St_ssdDimensions_Table.h"
+#include "tables/St_ssdConfiguration_Table.h"
+#include "tables/St_ssdWafersPosition_Table.h"
+
+#include "Sti/Base/Factory.h"
+#include "Sti/StiPlanarShape.h"
+#include "Sti/StiCylindricalShape.h"
+#include "Sti/StiMaterial.h"
+#include "Sti/StiPlacement.h"
+#include "Sti/StiDetector.h"
+#include "Sti/StiToolkit.h"
+#include "Sti/StiElossCalculator.h"
+#include "StDetectorDbMaker/StiHitErrorCalculator.h"
+#include "Sti/StiIsActiveFunctor.h"
+#include "Sti/StiNeverActiveFunctor.h"
+#include "StiSsd/StiSsdIsActiveFunctor.h" 
+#include "StiSsd/StiSsdDetectorBuilder.h" 
+#include "StSsdUtil/StSsdBarrel.hh"
+#include "StDetectorDbMaker/StiSsdHitErrorCalculator.h"
+StiSsdDetectorBuilder::StiSsdDetectorBuilder(bool active, const string & inputFile)
+    : StiDetectorBuilder("Ssd",active,inputFile), _siMat(0), _hybridMat(0)
+{
+    // Hit error parameters : it is set to 20 microns, in both x and y coordinates 
+}
+
+StiSsdDetectorBuilder::~StiSsdDetectorBuilder()
+{} 
+
+
+void StiSsdDetectorBuilder::buildDetectors(StMaker & source)
+{
+    gMessMgr->Info() << "StiSsdDetectorBuilder::buildDetectors() - I - Started "<<endm;
+    StSsdBarrel *mySsd = StSsdBarrel::Instance();
+    if (! mySsd) {// no active SSD
+      gMessMgr->Info() << "StiSsdDetectorBuilder::buildDetectors() - I - there is no SSD barrel - take whatever exist in GEANT" << endm;
+      StiVMCToolKit::GetVMC();
+      return;
+    }
+    int nRows = 1 ;
+    setNRows(nRows);
+    if (! _gasMat)
+      _gasMat     = add(new StiMaterial("SsdAir",7.3, 14.61, 0.001205, 30420.*0.001205, 7.3*12.e-9));
+    if (! _siMat)
+      _siMat      = add(new StiMaterial("SsdSi",14., 28.0855, 2.33, 21.82, 14.*12.*1e-9));
+    if (! _hybridMat)
+    _hybridMat  = add(new StiMaterial("SsdHyb",14., 28.0855, 2.33, 21.82, 14.*12.*1e-9));
+
+    double ionization = _siMat->getIonization();
+    //const static double I2Ar = (15.8*18) * (15.8*18) * 1e-18; // GeV**2
+    StiElossCalculator * siElossCalculator = new StiElossCalculator(_siMat->getZOverA(), ionization*ionization, _siMat->getA(), _siMat->getZ(), _siMat->getDensity());
+
+    //gMessMgr->Info() << "StiSsdDetectorBuilder::buildMaterials() - I - Done "<<endm;  
+    cout << "StiSsdDetectorBuilder::buildMaterials() - I - Done "<<endl;  
+    ssdDimensions_st *dimensions = mySsd->getDimensions();
+    Int_t NL = mySsd->getNumberOfLadders();
+    Int_t NW = mySsd->getNWaferPerLadder();
+    StSsdLadder *Ladder = mySsd->getLadder(0);
+    assert(Ladder);
+    StSsdWafer *Wafer1 = Ladder->getWafer(0);
+    StSsdWafer *Wafer2 = Ladder->getWafer(NW-1);
+    assert(Wafer1 && Wafer2);
+    Double_t width = TMath::Abs(Wafer1->x(2) - Wafer2->x(2))/2. + 2;
+    StiPlanarShape *ladderShape = new StiPlanarShape("SsdLadder",
+						     width,
+						     0.34, // increas by a factor ~10 2*dimensions->waferHalfThickness,
+						     dimensions->waferHalfLength );
+    add(ladderShape);
+    Int_t layer = 0;
+    setNSectors(layer,NL); 
+    /*! Placement of Ssd Modules is currently done by reading the geom.C table. 
+      Ladders are placed according to the coordinates of its first module number 	  
+      int idwafer = 7*1000+wafer*100+ladder;      	
+      ----> ladder # 1  ===> module 7101 
+      ----> ladder # 20 ===> module 7120
+    */
+    for (Int_t ladder = 0; ladder < NL; ladder++) {
+      Ladder = mySsd->getLadder(ladder);
+      if (! Ladder) continue;
+      Wafer1 = Ladder->getWafer(0);
+      Wafer2 = Ladder->getWafer(NW-1);
+      if (! Wafer1 || ! Wafer2) continue; 
+      StThreeVectorD centerVector1(Wafer1->x(0),Wafer1->x(1),Wafer1->x(2));
+      StThreeVectorD normalVector1(Wafer1->n(0),Wafer1->n(1),Wafer1->n(2));
+      StThreeVectorD centerVector2(Wafer2->x(0),Wafer2->x(1),Wafer2->x(2));
+      StThreeVectorD normalVector2(Wafer2->n(0),Wafer2->n(1),Wafer2->n(2));
+      StThreeVectorD centerVector = centerVector1 + centerVector2; centerVector *= 0.5;
+      StThreeVectorD normalVector = normalVector1 + normalVector2; normalVector *= 0.5;
+      Double_t prod = centerVector*normalVector;
+      if (prod < 0) normalVector *= -1;
+      double phi  = centerVector.phi();
+      double phiD = normalVector.phi();
+      double r = centerVector.perp();
+      cout <<"Det Id = "<<Wafer1->getId()<<"\tcv\t:"<<centerVector<<"\tphi:\t"<<phi<<"\tr:\t"<<r<<"\tz:\t" << centerVector.z()<< endl;
+      StiPlacement *pPlacement = new StiPlacement;
+      pPlacement->setZcenter(centerVector.z());
+      pPlacement->setLayerRadius(r); //this is only used for ordering in detector container...
+      pPlacement->setLayerAngle(phi); //this is only used for ordering in detector container...
+      pPlacement->setRegion(StiPlacement::kMidRapidity);
+      //		pPlacement->setNormalRep(phi, r, 0.);  //but we have to use this to fix ladders 20 and 12
+      pPlacement->setNormalRep(phiD, r*TMath::Cos(phi-phiD), r*TMath::Sin(phi-phiD)); 
+      StiDetector *pLadder = _detectorFactory->getInstance();
+      pLadder->setName(Form("Ssd/Layer_%d/Ladder_%d/Wafers", layer, ladder));
+      pLadder->setIsOn(true);
+      pLadder->setIsActive(new StiIsActiveFunctor(_active));
+      pLadder->setIsContinuousMedium(true);
+      pLadder->setIsDiscreteScatterer(true);
+      pLadder->setGas(_gasMat);
+      pLadder->setMaterial(_siMat);
+      pLadder->setShape(ladderShape);
+      pLadder->setPlacement(pPlacement); 
+      pLadder->setHitErrorCalculator(StiSsdHitErrorCalculator::instance());
+      pLadder->setKey(1,0);
+      pLadder->setKey(2,ladder-1);
+      pLadder->setElossCalculator(siElossCalculator);
+      add(layer,ladder,pLadder); 
+    }
+    useVMCGeometry();
+}
+//________________________________________________________________________________
+void StiSsdDetectorBuilder::useVMCGeometry() {
+  cout << "StiSsdDetectorBuilder::buildDetectors() -I- Use VMC geometry" << endl;
+  SetCurrentDetectorBuilder(this);
+  struct Material_t {
+    const Char_t *name;
+    StiMaterial    **p;
+  };
+  Material_t map[] = {
+    {"AIR", &_gasMat},
+    {"SILICON", &_siMat},
+    {"SILICON", &_hybridMat}
+  };
+  Int_t M = sizeof(map)/sizeof(Material_t);
+  for (Int_t i = 0; i < M; i++) {
+    const TGeoMaterial *mat =  gGeoManager->GetMaterial(map[i].name); 
+    if (! mat) continue;
+    Double_t PotI = StiVMCToolKit::GetPotI(mat);
+    *map[i].p = add(new StiMaterial(mat->GetName(),
+				    mat->GetZ(),
+				    mat->GetA(),
+				    mat->GetDensity(),
+				    mat->GetDensity()*mat->GetRadLen(),
+				    PotI));
+  }
+  const VolumeMap_t SsdVolumes[] = { 
+    // SSD
+    //  {"SFMO", "the mother of all Silicon Strip Detector volumes","HALL_1/CAVE_1/SVTT_1/SFMO_1","",""}, // 17.466824 [kg]
+    //    {"SCMP","SSD mounting plate inserted in the cone","HALL_1/CAVE_1/SVTT_1/SFMO_1/SCMP_1-8","",""},      //  0.024494 [kg]
+    //    {"SCVM","SSD V-shape mouting piece","HALL_1/CAVE_1/SVTT_1/SFMO_1/SCVM_1-8/*","",""},                  //  0.057931 [kg]
+    //    {"SSLT","the linking (sector to the cone) tube","HALL_1/CAVE_1/SVTT_1/SFMO_1/SSLT_1-8","",""},        //  0.027415 [kg]
+    //    {"SSLB","the linking (sector to the cone)","HALL_1/CAVE_1/SVTT_1/SFMO_1/SSLB_1-8","",""},             //  0.073710 [kg]
+    //    {"SSRS","the side of the small rib","HALL_1/CAVE_1/SVTT_1/SFMO_1/SSRS_1-4","",""},                    //  0.462138 [kg]
+    //    {"SSRT","the top of the side rib","HALL_1/CAVE_1/SVTT_1/SFMO_1/SSRT_1-4","",""},                      //  0.172237 [kg]
+    //    {"SSSS","Side parts of the small sectors","HALL_1/CAVE_1/SVTT_1/SFMO_1/SSSS_1-4","",""},              //  0.462138 [kg]
+    //    {"SSST","Top parts of the small sectors","HALL_1/CAVE_1/SVTT_1/SFMO_1/SSST_1-4","",""},               //  0.172237 [kg]
+    {"SFLM","the mother of the ladder","HALL_1/CAVE_1/SVTT_1/SFMO_1/SFLM_1-20/*","",""}              //  0.546171 [kg]
+    //  {"SFSM","the structure mother volume","HALL_1/CAVE_1/SVTT_1/SFMO_1/SFLM_1-20/SFSM_1/*","",""}     //   0.451003 [kg]
+    //  {"SFDM","the detectors and adcs mother volume","HALL_1/CAVE_1/SVTT_1/SFMO_1/SFLM_1-20/SFDM_1/*","",""} // 0.095168 [kg]
+    // {"SFSD","the strip detector",                  "HALL_1/CAVE_1/SVTT_1/SFMO_1/SFLM_1-20/SFDM_1/SFSW_1-16/SFSD_1","ssd",""}// 0.002041 [kg]
+  };
+  Int_t NoSsdVols = sizeof(SsdVolumes)/sizeof(VolumeMap_t);
+  TString pathT("HALL_1/CAVE_1");
+  gGeoManager->RestoreMasterVolume(); 
+  gGeoManager->CdTop();
+  // Check that SVTT_1/SFMO_1 exist
+  TString path("");
+  for (Int_t i = 0; i < NoSsdVols; i++) {
+    gGeoManager->RestoreMasterVolume(); 
+    gGeoManager->CdTop();
+    if (gGeoManager->cd(pathT)) {
+      path = pathT;
+      TGeoNode *nodeT = gGeoManager->GetCurrentNode();
+      if (! nodeT) continue;;
+      StiVMCToolKit::LoopOverNodes(nodeT, path, SsdVolumes[i].name, MakeAverageVolume);
+    } else gMessMgr->Info() << "StiSsdDetectorBuilder::useVMCGeometry skip node " << pathT.Data() << endm;
+  }
+}
+//________________________________________________________________________________
+ssdWafersPosition_st *StiSsdDetectorBuilder::ssdWafersPosition(Int_t Id, St_ssdWafersPosition *wafers) {
+  Int_t N = wafers->GetNRows();
+  ssdWafersPosition_st *wafer = wafers->GetTable();
+  for (Int_t i = 0; i < N; i++, wafer++) if (Id ==  wafer->id) return wafer;
+  return 0;
+}
diff --git a/StiSsd/StiSstDetectorBuilder.h b/StiSsd/StiSstDetectorBuilder.h
new file mode 100644
index 0000000..cdf02dc
--- /dev/null
+++ b/StiSsd/StiSstDetectorBuilder.h
@@ -0,0 +1,54 @@
+// $Id$
+// 
+// $Log$
+// Revision 1.1  2014/06/06 21:15:44  smirnovd
+// Add patches for StSsdDbMaker and StiSsd
+//
+// Revision 1.13  2009/03/16 13:50:09  fisyak
+// Move out all Sti Chairs into StDetectorDb
+//
+// Revision 1.12  2008/04/03 20:04:22  fisyak
+// Straighten out DB access via chairs
+//
+// Revision 1.11  2006/10/09 15:47:59  fisyak
+// use Normal represantation, remove StiDedxCalculator
+//
+// Revision 1.10  2006/06/28 18:51:46  fisyak
+// Add loading of tracking and hit error parameters from DB
+//
+// Revision 1.9  2005/06/21 16:35:01  lmartin
+// DetectorBuilder updated with the correct methods from StSsdUtil
+//
+// Revision 1.8  2005/06/21 15:31:47  lmartin
+// CVS tags added
+//
+/*!
+ * \class StiSsdDetectorBuilder
+ * \author Christelle Roy
+ * \date 02/27/04
+
+This class is the description of the StiSsdDetectorBuilder
+*/
+#ifndef StiSsdDetectorBuilder_H
+#define StiSsdDetectorBuilder_H
+#include "Sti/StiDetectorBuilder.h"
+#include "StDetectorDbMaker/StiHitErrorCalculator.h"
+#include "StThreeVector.hh"
+class ssdWafersPosition_st;
+class St_ssdWafersPosition;
+class StiSsdDetectorBuilder : public StiDetectorBuilder
+{
+
+ public:
+        StiSsdDetectorBuilder(bool active,const string & inputFile);
+	virtual ~StiSsdDetectorBuilder(); 
+	virtual void buildDetectors(StMaker& source);
+	virtual void useVMCGeometry();		
+	void         setSiMat(StiMaterial     *m) {_siMat = m;}
+	void         setHybridMat(StiMaterial *m) {_hybridMat = m;}
+	StiMaterial *getSiMat()    {return _siMat;}
+	StiMaterial *getHybridMat(){return _hybridMat;}
+ 
+ protected:
+	StiMaterial *_siMat;
+	StiMaterial *_hybridMat;
+	ssdWafersPosition_st *ssdWafersPosition(Int_t Id, St_ssdWafersPosition *wafers);
+};
+#endif 
-- 
1.8.2.GIT


From 3d7e6a2030a7fed1664bdb0d9a841e57e94a2cce Mon Sep 17 00:00:00 2001
From: Dmitri Smirnov <d.s@plexoos.com>
Date: Mon, 12 May 2014 12:46:27 -0400
Subject: [PATCH 02/10] Jonathan's changes

---
 StiSsd/StiSstDetectorBuilder.cxx | 158 +++++++++++++++++++++++----------------
 StiSsd/StiSstDetectorBuilder.h   |   8 ++
 2 files changed, 103 insertions(+), 63 deletions(-)

diff --git a/StiSsd/StiSstDetectorBuilder.cxx b/StiSsd/StiSstDetectorBuilder.cxx
index 8000d7e..266b7f8 100644
--- a/StiSsd/StiSstDetectorBuilder.cxx
+++ b/StiSsd/StiSstDetectorBuilder.cxx
@@ -93,11 +93,11 @@ StiSsdDetectorBuilder::StiSsdDetectorBuilder(bool active, const string & inputFi
 StiSsdDetectorBuilder::~StiSsdDetectorBuilder()
 {} 
 
-
 void StiSsdDetectorBuilder::buildDetectors(StMaker & source)
 {
     gMessMgr->Info() << "StiSsdDetectorBuilder::buildDetectors() - I - Started "<<endm;
-    StSsdBarrel *mySsd = StSsdBarrel::Instance();
+  //StSsdBarrel *mySsd = StSsdBarrel::Instance();
+  mySsd = StSsdBarrel::Instance();
     if (! mySsd) {// no active SSD
       gMessMgr->Info() << "StiSsdDetectorBuilder::buildDetectors() - I - there is no SSD barrel - take whatever exist in GEANT" << endm;
       StiVMCToolKit::GetVMC();
@@ -105,22 +105,56 @@ void StiSsdDetectorBuilder::buildDetectors(StMaker & source)
     }
     int nRows = 1 ;
     setNRows(nRows);
-    if (! _gasMat)
-      _gasMat     = add(new StiMaterial("SsdAir",7.3, 14.61, 0.001205, 30420.*0.001205, 7.3*12.e-9));
-    if (! _siMat)
-      _siMat      = add(new StiMaterial("SsdSi",14., 28.0855, 2.33, 21.82, 14.*12.*1e-9));
-    if (! _hybridMat)
-    _hybridMat  = add(new StiMaterial("SsdHyb",14., 28.0855, 2.33, 21.82, 14.*12.*1e-9));
 
+  // Gas material must be defined. Here we use air properties
+  _gasMat = add(new StiMaterial("PixelAir", 7.3, 14.61, 0.001205, 30420.*0.001205, 7.3 * 12.e-9));
+  
+  if (StiVMCToolKit::GetVMC()) {
+    useVMCGeometry();
+    buildInactiveVolumes();
+  }
+}
+
+void StiSsdDetectorBuilder::useVMCGeometry() {
+  cout << "StiSsdDetectorBuilder::buildDetectors() -I- Use VMC geometry" << endl;
+  SetCurrentDetectorBuilder(this);
+  
+  //build the material
+  struct Material_t {
+    const Char_t *name;
+    StiMaterial    **p;
+  };
+  
+  Material_t map[] = {
+    {"AIR", &_gasMat},
+    {"SILICON", &_siMat},
+    {"SILICON", &_hybridMat}
+  };
+  
+  Int_t M = sizeof(map)/sizeof(Material_t);
+  
+  for (Int_t i = 0; i < M; i++) {
+    const TGeoMaterial *mat =  gGeoManager->GetMaterial(map[i].name); 
+    if (! mat) continue;
+    Double_t PotI = StiVMCToolKit::GetPotI(mat);
+    *map[i].p = add(new StiMaterial(mat->GetName(),
+				    mat->GetZ(),
+				    mat->GetA(),
+				    mat->GetDensity(),
+				    mat->GetDensity()*mat->GetRadLen(),
+				    PotI));
+  }
     double ionization = _siMat->getIonization();
-    //const static double I2Ar = (15.8*18) * (15.8*18) * 1e-18; // GeV**2
+  
     StiElossCalculator * siElossCalculator = new StiElossCalculator(_siMat->getZOverA(), ionization*ionization, _siMat->getA(), _siMat->getZ(), _siMat->getDensity());
 
-    //gMessMgr->Info() << "StiSsdDetectorBuilder::buildMaterials() - I - Done "<<endm;  
     cout << "StiSsdDetectorBuilder::buildMaterials() - I - Done "<<endl;  
+  
     ssdDimensions_st *dimensions = mySsd->getDimensions();
     Int_t NL = mySsd->getNumberOfLadders();
     Int_t NW = mySsd->getNWaferPerLadder();
+  
+  // use 1 ladder to get the dimension 
     StSsdLadder *Ladder = mySsd->getLadder(0);
     assert(Ladder);
     StSsdWafer *Wafer1 = Ladder->getWafer(0);
@@ -132,6 +166,7 @@ void StiSsdDetectorBuilder::buildDetectors(StMaker & source)
 						     0.34, // increas by a factor ~10 2*dimensions->waferHalfThickness,
 						     dimensions->waferHalfLength );
     add(ladderShape);
+  
     Int_t layer = 0;
     setNSectors(layer,NL); 
     /*! Placement of Ssd Modules is currently done by reading the geom.C table. 
@@ -160,18 +195,24 @@ void StiSsdDetectorBuilder::buildDetectors(StMaker & source)
       cout <<"Det Id = "<<Wafer1->getId()<<"\tcv\t:"<<centerVector<<"\tphi:\t"<<phi<<"\tr:\t"<<r<<"\tz:\t" << centerVector.z()<< endl;
       StiPlacement *pPlacement = new StiPlacement;
       pPlacement->setZcenter(centerVector.z());
+    // centerVector.z can be different than with this definition
+    // issue ?
       pPlacement->setLayerRadius(r); //this is only used for ordering in detector container...
       pPlacement->setLayerAngle(phi); //this is only used for ordering in detector container...
       pPlacement->setRegion(StiPlacement::kMidRapidity);
       //		pPlacement->setNormalRep(phi, r, 0.);  //but we have to use this to fix ladders 20 and 12
       pPlacement->setNormalRep(phiD, r*TMath::Cos(phi-phiD), r*TMath::Sin(phi-phiD)); 
+
+    //Build final detector object
       StiDetector *pLadder = _detectorFactory->getInstance();
       pLadder->setName(Form("Ssd/Layer_%d/Ladder_%d/Wafers", layer, ladder));
-      pLadder->setIsOn(true);
+    pLadder->setIsOn(kTRUE);
       pLadder->setIsActive(new StiIsActiveFunctor(_active));
-      pLadder->setIsContinuousMedium(true);
+    pLadder->setIsContinuousMedium(false);
       pLadder->setIsDiscreteScatterer(true);
-      pLadder->setGas(_gasMat);
+    pLadder->setGas(GetCurrentDetectorBuilder()->getGasMat());
+    if (!pLadder->getGas()) LOG_INFO << "gas not there!" << endm;
+    //pLadder->setGas(_gasMat);
       pLadder->setMaterial(_siMat);
       pLadder->setShape(ladderShape);
       pLadder->setPlacement(pPlacement); 
@@ -181,67 +222,58 @@ void StiSsdDetectorBuilder::buildDetectors(StMaker & source)
       pLadder->setElossCalculator(siElossCalculator);
       add(layer,ladder,pLadder); 
     }
-    useVMCGeometry();
-}
-//________________________________________________________________________________
-void StiSsdDetectorBuilder::useVMCGeometry() {
-  cout << "StiSsdDetectorBuilder::buildDetectors() -I- Use VMC geometry" << endl;
-  SetCurrentDetectorBuilder(this);
-  struct Material_t {
-    const Char_t *name;
-    StiMaterial    **p;
-  };
-  Material_t map[] = {
-    {"AIR", &_gasMat},
-    {"SILICON", &_siMat},
-    {"SILICON", &_hybridMat}
-  };
-  Int_t M = sizeof(map)/sizeof(Material_t);
-  for (Int_t i = 0; i < M; i++) {
-    const TGeoMaterial *mat =  gGeoManager->GetMaterial(map[i].name); 
-    if (! mat) continue;
-    Double_t PotI = StiVMCToolKit::GetPotI(mat);
-    *map[i].p = add(new StiMaterial(mat->GetName(),
-				    mat->GetZ(),
-				    mat->GetA(),
-				    mat->GetDensity(),
-				    mat->GetDensity()*mat->GetRadLen(),
-				    PotI));
   }
+
+void StiSsdDetectorBuilder::buildInactiveVolumes()
+{
+  // Build average inactive volumes
   const VolumeMap_t SsdVolumes[] = { 
     // SSD
     //  {"SFMO", "the mother of all Silicon Strip Detector volumes","HALL_1/CAVE_1/SVTT_1/SFMO_1","",""}, // 17.466824 [kg]
-    //    {"SCMP","SSD mounting plate inserted in the cone","HALL_1/CAVE_1/SVTT_1/SFMO_1/SCMP_1-8","",""},      //  0.024494 [kg]
-    //    {"SCVM","SSD V-shape mouting piece","HALL_1/CAVE_1/SVTT_1/SFMO_1/SCVM_1-8/*","",""},                  //  0.057931 [kg]
-    //    {"SSLT","the linking (sector to the cone) tube","HALL_1/CAVE_1/SVTT_1/SFMO_1/SSLT_1-8","",""},        //  0.027415 [kg]
-    //    {"SSLB","the linking (sector to the cone)","HALL_1/CAVE_1/SVTT_1/SFMO_1/SSLB_1-8","",""},             //  0.073710 [kg]
-    //    {"SSRS","the side of the small rib","HALL_1/CAVE_1/SVTT_1/SFMO_1/SSRS_1-4","",""},                    //  0.462138 [kg]
-    //    {"SSRT","the top of the side rib","HALL_1/CAVE_1/SVTT_1/SFMO_1/SSRT_1-4","",""},                      //  0.172237 [kg]
-    //    {"SSSS","Side parts of the small sectors","HALL_1/CAVE_1/SVTT_1/SFMO_1/SSSS_1-4","",""},              //  0.462138 [kg]
-    //    {"SSST","Top parts of the small sectors","HALL_1/CAVE_1/SVTT_1/SFMO_1/SSST_1-4","",""},               //  0.172237 [kg]
-    {"SFLM","the mother of the ladder","HALL_1/CAVE_1/SVTT_1/SFMO_1/SFLM_1-20/*","",""}              //  0.546171 [kg]
-    //  {"SFSM","the structure mother volume","HALL_1/CAVE_1/SVTT_1/SFMO_1/SFLM_1-20/SFSM_1/*","",""}     //   0.451003 [kg]
-    //  {"SFDM","the detectors and adcs mother volume","HALL_1/CAVE_1/SVTT_1/SFMO_1/SFLM_1-20/SFDM_1/*","",""} // 0.095168 [kg]
-    // {"SFSD","the strip detector",                  "HALL_1/CAVE_1/SVTT_1/SFMO_1/SFLM_1-20/SFDM_1/SFSW_1-16/SFSD_1","ssd",""}// 0.002041 [kg]
+    {"SFMO1","the mother of the ladder","HALL_1/CAVE_1/TpcRefSys_1/IDSM_1/SFMO_1","",""}              //  0.546171 [kg]
   };
+
+// Build the volume map and loop over all found volumes
   Int_t NoSsdVols = sizeof(SsdVolumes)/sizeof(VolumeMap_t);
-  TString pathT("HALL_1/CAVE_1");
   gGeoManager->RestoreMasterVolume(); 
   gGeoManager->CdTop();
-  // Check that SVTT_1/SFMO_1 exist
-  TString path("");
+  
   for (Int_t i = 0; i < NoSsdVols; i++) {
-    gGeoManager->RestoreMasterVolume(); 
-    gGeoManager->CdTop();
-    if (gGeoManager->cd(pathT)) {
-      path = pathT;
-      TGeoNode *nodeT = gGeoManager->GetCurrentNode();
-      if (! nodeT) continue;;
-      StiVMCToolKit::LoopOverNodes(nodeT, path, SsdVolumes[i].name, MakeAverageVolume);
-    } else gMessMgr->Info() << "StiSsdDetectorBuilder::useVMCGeometry skip node " << pathT.Data() << endm;
+    
+    if ( !gGeoManager->cd(SsdVolumes[i].path) ) {
+      Warning("buildInactiveVolumes()", "Cannot find path to %s node. Skipping to next node...", SsdVolumes[i].name);
+      continue;
+    }
+    
+    TGeoNode *geoNode = gGeoManager->GetCurrentNode();
+    
+    if (!geoNode) continue;
+    
+    LOG_DEBUG << "Current node : " << i << "/" << NoSsdVols << " path is : " << SsdVolumes[i].name << endm;
+    LOG_DEBUG << "Number of daughters : " << geoNode->GetNdaughters() << " weight : " << geoNode->GetVolume()->Weight() << endm;
+    
+    StiVMCToolKit::LoopOverNodes(geoNode, SsdVolumes[i].path, SsdVolumes[i].name, MakeAverageVolume);
+    
+    // Access last added volume
+    int row = getNRows() - 1;
+    int sector = 0;
+    
+    // Make Sti detector active, i.e. use it in tracking
+    StiDetector *stiDetector = getDetector(row, sector);
+    stiDetector->setIsOn(true);
+    
+    // Modify dimensions of the mother volume
+    if (string(SsdVolumes[i].name) == string("IBMO1"))
+      {
+	StiCylindricalShape *stiShape = (StiCylindricalShape*) stiDetector->getShape();
+	stiShape->setHalfDepth(45);
+	
+	StiPlacement *stiPlacement = stiDetector->getPlacement();
+	stiPlacement->setZcenter(-5);
   }
 }
-//________________________________________________________________________________
+}
+
 ssdWafersPosition_st *StiSsdDetectorBuilder::ssdWafersPosition(Int_t Id, St_ssdWafersPosition *wafers) {
   Int_t N = wafers->GetNRows();
   ssdWafersPosition_st *wafer = wafers->GetTable();
diff --git a/StiSsd/StiSstDetectorBuilder.h b/StiSsd/StiSstDetectorBuilder.h
index cdf02dc..9fbcddc 100644
--- a/StiSsd/StiSstDetectorBuilder.h
+++ b/StiSsd/StiSstDetectorBuilder.h
@@ -31,12 +31,14 @@ This class is the description of the StiSsdDetectorBuilder
 #include "Sti/StiDetectorBuilder.h"
 #include "StDetectorDbMaker/StiHitErrorCalculator.h"
 #include "StThreeVector.hh"
+class StSsdBarrel;
 class ssdWafersPosition_st;
 class St_ssdWafersPosition;
 class StiSsdDetectorBuilder : public StiDetectorBuilder
 {
 
  public:
+
         StiSsdDetectorBuilder(bool active,const string & inputFile);
 	virtual ~StiSsdDetectorBuilder(); 
 	virtual void buildDetectors(StMaker& source);
@@ -47,8 +49,14 @@ class StiSsdDetectorBuilder : public StiDetectorBuilder
 	StiMaterial *getHybridMat(){return _hybridMat;}
  
  protected:
+
+	StSsdBarrel *mySsd;
 	StiMaterial *_siMat;
 	StiMaterial *_hybridMat;
 	ssdWafersPosition_st *ssdWafersPosition(Int_t Id, St_ssdWafersPosition *wafers);
+
+ private:
+
+	void buildInactiveVolumes();
 };
 #endif 
-- 
1.8.2.GIT


From 4646500ef214a53207cafd7b29fb4e11fae9b9f2 Mon Sep 17 00:00:00 2001
From: Dmitri Smirnov <d.s@plexoos.com>
Date: Thu, 8 May 2014 16:46:11 -0400
Subject: [PATCH 03/10] Fixed style with astyle -s3 -p -H -A3 -k3 -O -o -y -Y
 -f

---
 StiSsd/StiSstDetectorBuilder.cxx | 334 +++++++++++++++++++++------------------
 StiSsd/StiSstDetectorBuilder.h   |  38 ++---
 2 files changed, 195 insertions(+), 177 deletions(-)

diff --git a/StiSsd/StiSstDetectorBuilder.cxx b/StiSsd/StiSstDetectorBuilder.cxx
index 266b7f8..df8087a 100644
--- a/StiSsd/StiSstDetectorBuilder.cxx
+++ b/StiSsd/StiSstDetectorBuilder.cxx
@@ -1,5 +1,5 @@
 // $Id$
-// 
+//
 // $Log$
 // Revision 1.1  2014/06/06 21:15:44  smirnovd
 // Add patches for StSsdDbMaker and StiSsd
 //
 // Revision 1.36  2013/03/22 23:58:51  fisyak
 // Remove name[50]
@@ -80,203 +80,221 @@ using namespace std;
 #include "StDetectorDbMaker/StiHitErrorCalculator.h"
 #include "Sti/StiIsActiveFunctor.h"
 #include "Sti/StiNeverActiveFunctor.h"
-#include "StiSsd/StiSsdIsActiveFunctor.h" 
-#include "StiSsd/StiSsdDetectorBuilder.h" 
+#include "StiSsd/StiSsdIsActiveFunctor.h"
+#include "StiSsd/StiSsdDetectorBuilder.h"
 #include "StSsdUtil/StSsdBarrel.hh"
 #include "StDetectorDbMaker/StiSsdHitErrorCalculator.h"
-StiSsdDetectorBuilder::StiSsdDetectorBuilder(bool active, const string & inputFile)
-    : StiDetectorBuilder("Ssd",active,inputFile), _siMat(0), _hybridMat(0)
+
+StiSsdDetectorBuilder::StiSsdDetectorBuilder(bool active, const string &inputFile)
+   : StiDetectorBuilder("Ssd", active, inputFile), _siMat(0), _hybridMat(0)
 {
-    // Hit error parameters : it is set to 20 microns, in both x and y coordinates 
+   // Hit error parameters : it is set to 20 microns, in both x and y coordinates
 }
 
 StiSsdDetectorBuilder::~StiSsdDetectorBuilder()
-{} 
+{}
 
-void StiSsdDetectorBuilder::buildDetectors(StMaker & source)
+void StiSsdDetectorBuilder::buildDetectors(StMaker &source)
 {
-    gMessMgr->Info() << "StiSsdDetectorBuilder::buildDetectors() - I - Started "<<endm;
-  //StSsdBarrel *mySsd = StSsdBarrel::Instance();
-  mySsd = StSsdBarrel::Instance();
-    if (! mySsd) {// no active SSD
+   gMessMgr->Info() << "StiSsdDetectorBuilder::buildDetectors() - I - Started " << endm;
+   //StSsdBarrel *mySsd = StSsdBarrel::Instance();
+   mySsd = StSsdBarrel::Instance();
+
+   if (! mySsd) {// no active SSD
       gMessMgr->Info() << "StiSsdDetectorBuilder::buildDetectors() - I - there is no SSD barrel - take whatever exist in GEANT" << endm;
       StiVMCToolKit::GetVMC();
       return;
-    }
-    int nRows = 1 ;
-    setNRows(nRows);
-
-  // Gas material must be defined. Here we use air properties
-  _gasMat = add(new StiMaterial("PixelAir", 7.3, 14.61, 0.001205, 30420.*0.001205, 7.3 * 12.e-9));
-  
-  if (StiVMCToolKit::GetVMC()) {
-    useVMCGeometry();
-    buildInactiveVolumes();
-  }
+   }
+
+   int nRows = 1 ;
+   setNRows(nRows);
+
+   // Gas material must be defined. Here we use air properties
+   _gasMat = add(new StiMaterial("PixelAir", 7.3, 14.61, 0.001205, 30420.*0.001205, 7.3 * 12.e-9));
+
+   if (StiVMCToolKit::GetVMC()) {
+      useVMCGeometry();
+      buildInactiveVolumes();
+   }
 }
 
-void StiSsdDetectorBuilder::useVMCGeometry() {
-  cout << "StiSsdDetectorBuilder::buildDetectors() -I- Use VMC geometry" << endl;
-  SetCurrentDetectorBuilder(this);
-  
-  //build the material
-  struct Material_t {
-    const Char_t *name;
-    StiMaterial    **p;
-  };
-  
-  Material_t map[] = {
-    {"AIR", &_gasMat},
-    {"SILICON", &_siMat},
-    {"SILICON", &_hybridMat}
-  };
-  
-  Int_t M = sizeof(map)/sizeof(Material_t);
-  
-  for (Int_t i = 0; i < M; i++) {
-    const TGeoMaterial *mat =  gGeoManager->GetMaterial(map[i].name); 
-    if (! mat) continue;
-    Double_t PotI = StiVMCToolKit::GetPotI(mat);
-    *map[i].p = add(new StiMaterial(mat->GetName(),
-				    mat->GetZ(),
-				    mat->GetA(),
-				    mat->GetDensity(),
-				    mat->GetDensity()*mat->GetRadLen(),
-				    PotI));
-  }
-    double ionization = _siMat->getIonization();
-  
-    StiElossCalculator * siElossCalculator = new StiElossCalculator(_siMat->getZOverA(), ionization*ionization, _siMat->getA(), _siMat->getZ(), _siMat->getDensity());
-
-    cout << "StiSsdDetectorBuilder::buildMaterials() - I - Done "<<endl;  
-  
-    ssdDimensions_st *dimensions = mySsd->getDimensions();
-    Int_t NL = mySsd->getNumberOfLadders();
-    Int_t NW = mySsd->getNWaferPerLadder();
-  
-  // use 1 ladder to get the dimension 
-    StSsdLadder *Ladder = mySsd->getLadder(0);
-    assert(Ladder);
-    StSsdWafer *Wafer1 = Ladder->getWafer(0);
-    StSsdWafer *Wafer2 = Ladder->getWafer(NW-1);
-    assert(Wafer1 && Wafer2);
-    Double_t width = TMath::Abs(Wafer1->x(2) - Wafer2->x(2))/2. + 2;
-    StiPlanarShape *ladderShape = new StiPlanarShape("SsdLadder",
-						     width,
-						     0.34, // increas by a factor ~10 2*dimensions->waferHalfThickness,
-						     dimensions->waferHalfLength );
-    add(ladderShape);
-  
-    Int_t layer = 0;
-    setNSectors(layer,NL); 
-    /*! Placement of Ssd Modules is currently done by reading the geom.C table. 
-      Ladders are placed according to the coordinates of its first module number 	  
-      int idwafer = 7*1000+wafer*100+ladder;      	
-      ----> ladder # 1  ===> module 7101 
-      ----> ladder # 20 ===> module 7120
-    */
-    for (Int_t ladder = 0; ladder < NL; ladder++) {
+void StiSsdDetectorBuilder::useVMCGeometry()
+{
+   cout << "StiSsdDetectorBuilder::buildDetectors() -I- Use VMC geometry" << endl;
+   SetCurrentDetectorBuilder(this);
+
+   //build the material
+   struct Material_t {
+      const Char_t *name;
+      StiMaterial    **p;
+   };
+
+   Material_t map[] = {
+      {"AIR", &_gasMat},
+      {"SILICON", &_siMat},
+      {"SILICON", &_hybridMat}
+   };
+
+   Int_t M = sizeof(map) / sizeof(Material_t);
+
+   for (Int_t i = 0; i < M; i++) {
+      const TGeoMaterial *mat =  gGeoManager->GetMaterial(map[i].name);
+
+      if (! mat) continue;
+
+      Double_t PotI = StiVMCToolKit::GetPotI(mat);
+      *map[i].p = add(new StiMaterial(mat->GetName(),
+                                      mat->GetZ(),
+                                      mat->GetA(),
+                                      mat->GetDensity(),
+                                      mat->GetDensity()*mat->GetRadLen(),
+                                      PotI));
+   }
+
+   double ionization = _siMat->getIonization();
+
+   StiElossCalculator *siElossCalculator = new StiElossCalculator(_siMat->getZOverA(), ionization * ionization, _siMat->getA(), _siMat->getZ(), _siMat->getDensity());
+
+   cout << "StiSsdDetectorBuilder::buildMaterials() - I - Done " << endl;
+
+   ssdDimensions_st *dimensions = mySsd->getDimensions();
+   Int_t NL = mySsd->getNumberOfLadders();
+   Int_t NW = mySsd->getNWaferPerLadder();
+
+   // use 1 ladder to get the dimension
+   StSsdLadder *Ladder = mySsd->getLadder(0);
+   assert(Ladder);
+   StSsdWafer *Wafer1 = Ladder->getWafer(0);
+   StSsdWafer *Wafer2 = Ladder->getWafer(NW - 1);
+   assert(Wafer1 && Wafer2);
+   Double_t width = TMath::Abs(Wafer1->x(2) - Wafer2->x(2)) / 2. + 2;
+   StiPlanarShape *ladderShape = new StiPlanarShape("SsdLadder",
+         width,
+         0.34, // increas by a factor ~10 2*dimensions->waferHalfThickness,
+         dimensions->waferHalfLength );
+   add(ladderShape);
+
+   Int_t layer = 0;
+   setNSectors(layer, NL);
+
+   /*! Placement of Ssd Modules is currently done by reading the geom.C table.
+     Ladders are placed according to the coordinates of its first module number
+     int idwafer = 7*1000+wafer*100+ladder;
+     ----> ladder # 1  ===> module 7101
+     ----> ladder # 20 ===> module 7120
+   */
+   for (Int_t ladder = 0; ladder < NL; ladder++) {
       Ladder = mySsd->getLadder(ladder);
+
       if (! Ladder) continue;
+
       Wafer1 = Ladder->getWafer(0);
-      Wafer2 = Ladder->getWafer(NW-1);
-      if (! Wafer1 || ! Wafer2) continue; 
-      StThreeVectorD centerVector1(Wafer1->x(0),Wafer1->x(1),Wafer1->x(2));
-      StThreeVectorD normalVector1(Wafer1->n(0),Wafer1->n(1),Wafer1->n(2));
-      StThreeVectorD centerVector2(Wafer2->x(0),Wafer2->x(1),Wafer2->x(2));
-      StThreeVectorD normalVector2(Wafer2->n(0),Wafer2->n(1),Wafer2->n(2));
+      Wafer2 = Ladder->getWafer(NW - 1);
+
+      if (! Wafer1 || ! Wafer2) continue;
+
+      StThreeVectorD centerVector1(Wafer1->x(0), Wafer1->x(1), Wafer1->x(2));
+      StThreeVectorD normalVector1(Wafer1->n(0), Wafer1->n(1), Wafer1->n(2));
+      StThreeVectorD centerVector2(Wafer2->x(0), Wafer2->x(1), Wafer2->x(2));
+      StThreeVectorD normalVector2(Wafer2->n(0), Wafer2->n(1), Wafer2->n(2));
       StThreeVectorD centerVector = centerVector1 + centerVector2; centerVector *= 0.5;
       StThreeVectorD normalVector = normalVector1 + normalVector2; normalVector *= 0.5;
-      Double_t prod = centerVector*normalVector;
+      Double_t prod = centerVector * normalVector;
+
       if (prod < 0) normalVector *= -1;
+
       double phi  = centerVector.phi();
       double phiD = normalVector.phi();
       double r = centerVector.perp();
-      cout <<"Det Id = "<<Wafer1->getId()<<"\tcv\t:"<<centerVector<<"\tphi:\t"<<phi<<"\tr:\t"<<r<<"\tz:\t" << centerVector.z()<< endl;
+      cout << "Det Id = " << Wafer1->getId() << "\tcv\t:" << centerVector << "\tphi:\t" << phi << "\tr:\t" << r << "\tz:\t" << centerVector.z() << endl;
       StiPlacement *pPlacement = new StiPlacement;
       pPlacement->setZcenter(centerVector.z());
-    // centerVector.z can be different than with this definition
-    // issue ?
+      // centerVector.z can be different than with this definition
+      // issue ?
       pPlacement->setLayerRadius(r); //this is only used for ordering in detector container...
       pPlacement->setLayerAngle(phi); //this is only used for ordering in detector container...
       pPlacement->setRegion(StiPlacement::kMidRapidity);
       //		pPlacement->setNormalRep(phi, r, 0.);  //but we have to use this to fix ladders 20 and 12
-      pPlacement->setNormalRep(phiD, r*TMath::Cos(phi-phiD), r*TMath::Sin(phi-phiD)); 
+      pPlacement->setNormalRep(phiD, r * TMath::Cos(phi - phiD), r * TMath::Sin(phi - phiD));
 
-    //Build final detector object
+      //Build final detector object
       StiDetector *pLadder = _detectorFactory->getInstance();
       pLadder->setName(Form("Ssd/Layer_%d/Ladder_%d/Wafers", layer, ladder));
-    pLadder->setIsOn(kTRUE);
+      pLadder->setIsOn(kTRUE);
       pLadder->setIsActive(new StiIsActiveFunctor(_active));
-    pLadder->setIsContinuousMedium(false);
+      pLadder->setIsContinuousMedium(false);
       pLadder->setIsDiscreteScatterer(true);
-    pLadder->setGas(GetCurrentDetectorBuilder()->getGasMat());
-    if (!pLadder->getGas()) LOG_INFO << "gas not there!" << endm;
-    //pLadder->setGas(_gasMat);
+      pLadder->setGas(GetCurrentDetectorBuilder()->getGasMat());
+
+      if (!pLadder->getGas()) LOG_INFO << "gas not there!" << endm;
+
+      //pLadder->setGas(_gasMat);
       pLadder->setMaterial(_siMat);
       pLadder->setShape(ladderShape);
-      pLadder->setPlacement(pPlacement); 
+      pLadder->setPlacement(pPlacement);
       pLadder->setHitErrorCalculator(StiSsdHitErrorCalculator::instance());
-      pLadder->setKey(1,0);
-      pLadder->setKey(2,ladder-1);
+      pLadder->setKey(1, 0);
+      pLadder->setKey(2, ladder - 1);
       pLadder->setElossCalculator(siElossCalculator);
-      add(layer,ladder,pLadder); 
-    }
-  }
+      add(layer, ladder, pLadder);
+   }
+}
 
 void StiSsdDetectorBuilder::buildInactiveVolumes()
 {
-  // Build average inactive volumes
-  const VolumeMap_t SsdVolumes[] = { 
-    // SSD
-    //  {"SFMO", "the mother of all Silicon Strip Detector volumes","HALL_1/CAVE_1/SVTT_1/SFMO_1","",""}, // 17.466824 [kg]
-    {"SFMO1","the mother of the ladder","HALL_1/CAVE_1/TpcRefSys_1/IDSM_1/SFMO_1","",""}              //  0.546171 [kg]
-  };
-
-// Build the volume map and loop over all found volumes
-  Int_t NoSsdVols = sizeof(SsdVolumes)/sizeof(VolumeMap_t);
-  gGeoManager->RestoreMasterVolume(); 
-  gGeoManager->CdTop();
-  
-  for (Int_t i = 0; i < NoSsdVols; i++) {
-    
-    if ( !gGeoManager->cd(SsdVolumes[i].path) ) {
-      Warning("buildInactiveVolumes()", "Cannot find path to %s node. Skipping to next node...", SsdVolumes[i].name);
-      continue;
-    }
-    
-    TGeoNode *geoNode = gGeoManager->GetCurrentNode();
-    
-    if (!geoNode) continue;
-    
-    LOG_DEBUG << "Current node : " << i << "/" << NoSsdVols << " path is : " << SsdVolumes[i].name << endm;
-    LOG_DEBUG << "Number of daughters : " << geoNode->GetNdaughters() << " weight : " << geoNode->GetVolume()->Weight() << endm;
-    
-    StiVMCToolKit::LoopOverNodes(geoNode, SsdVolumes[i].path, SsdVolumes[i].name, MakeAverageVolume);
-    
-    // Access last added volume
-    int row = getNRows() - 1;
-    int sector = 0;
-    
-    // Make Sti detector active, i.e. use it in tracking
-    StiDetector *stiDetector = getDetector(row, sector);
-    stiDetector->setIsOn(true);
-    
-    // Modify dimensions of the mother volume
-    if (string(SsdVolumes[i].name) == string("IBMO1"))
-      {
-	StiCylindricalShape *stiShape = (StiCylindricalShape*) stiDetector->getShape();
-	stiShape->setHalfDepth(45);
-	
-	StiPlacement *stiPlacement = stiDetector->getPlacement();
-	stiPlacement->setZcenter(-5);
-  }
-}
+   // Build average inactive volumes
+   const VolumeMap_t SsdVolumes[] = {
+      // SSD
+      //  {"SFMO", "the mother of all Silicon Strip Detector volumes","HALL_1/CAVE_1/SVTT_1/SFMO_1","",""}, // 17.466824 [kg]
+      {"SFMO1", "the mother of the ladder", "HALL_1/CAVE_1/TpcRefSys_1/IDSM_1/SFMO_1", "", ""}          //  0.546171 [kg]
+   };
+
+   // Build the volume map and loop over all found volumes
+   Int_t NoSsdVols = sizeof(SsdVolumes) / sizeof(VolumeMap_t);
+   gGeoManager->RestoreMasterVolume();
+   gGeoManager->CdTop();
+
+   for (Int_t i = 0; i < NoSsdVols; i++) {
+
+      if ( !gGeoManager->cd(SsdVolumes[i].path) ) {
+         Warning("buildInactiveVolumes()", "Cannot find path to %s node. Skipping to next node...", SsdVolumes[i].name);
+         continue;
+      }
+
+      TGeoNode *geoNode = gGeoManager->GetCurrentNode();
+
+      if (!geoNode) continue;
+
+      LOG_DEBUG << "Current node : " << i << "/" << NoSsdVols << " path is : " << SsdVolumes[i].name << endm;
+      LOG_DEBUG << "Number of daughters : " << geoNode->GetNdaughters() << " weight : " << geoNode->GetVolume()->Weight() << endm;
+
+      StiVMCToolKit::LoopOverNodes(geoNode, SsdVolumes[i].path, SsdVolumes[i].name, MakeAverageVolume);
+
+      // Access last added volume
+      int row = getNRows() - 1;
+      int sector = 0;
+
+      // Make Sti detector active, i.e. use it in tracking
+      StiDetector *stiDetector = getDetector(row, sector);
+      stiDetector->setIsOn(true);
+
+      // Modify dimensions of the mother volume
+      if (string(SsdVolumes[i].name) == string("IBMO1")) {
+         StiCylindricalShape *stiShape = (StiCylindricalShape *) stiDetector->getShape();
+         stiShape->setHalfDepth(45);
+
+         StiPlacement *stiPlacement = stiDetector->getPlacement();
+         stiPlacement->setZcenter(-5);
+      }
+   }
 }
 
-ssdWafersPosition_st *StiSsdDetectorBuilder::ssdWafersPosition(Int_t Id, St_ssdWafersPosition *wafers) {
-  Int_t N = wafers->GetNRows();
-  ssdWafersPosition_st *wafer = wafers->GetTable();
-  for (Int_t i = 0; i < N; i++, wafer++) if (Id ==  wafer->id) return wafer;
-  return 0;
+ssdWafersPosition_st *StiSsdDetectorBuilder::ssdWafersPosition(Int_t Id, St_ssdWafersPosition *wafers)
+{
+   Int_t N = wafers->GetNRows();
+   ssdWafersPosition_st *wafer = wafers->GetTable();
+
+   for (Int_t i = 0; i < N; i++, wafer++) if (Id ==  wafer->id) return wafer;
+
+   return 0;
 }
diff --git a/StiSsd/StiSstDetectorBuilder.h b/StiSsd/StiSstDetectorBuilder.h
index 9fbcddc..0846978 100644
--- a/StiSsd/StiSstDetectorBuilder.h
+++ b/StiSsd/StiSstDetectorBuilder.h
@@ -1,5 +1,5 @@
 // $Id$
-// 
+//
 // $Log$
 // Revision 1.1  2014/06/06 21:15:44  smirnovd
 // Add patches for StSsdDbMaker and StiSsd
 //
 // Revision 1.13  2009/03/16 13:50:09  fisyak
 // Move out all Sti Chairs into StDetectorDb
@@ -37,26 +37,26 @@ class St_ssdWafersPosition;
 class StiSsdDetectorBuilder : public StiDetectorBuilder
 {
 
- public:
+public:
+
+   StiSsdDetectorBuilder(bool active, const string &inputFile);
+   virtual ~StiSsdDetectorBuilder();
+   virtual void buildDetectors(StMaker &source);
+   virtual void useVMCGeometry();
+   void         setSiMat(StiMaterial     *m) {_siMat = m;}
+   void         setHybridMat(StiMaterial *m) {_hybridMat = m;}
+   StiMaterial *getSiMat()    {return _siMat;}
+   StiMaterial *getHybridMat() {return _hybridMat;}
 
-        StiSsdDetectorBuilder(bool active,const string & inputFile);
-	virtual ~StiSsdDetectorBuilder(); 
-	virtual void buildDetectors(StMaker& source);
-	virtual void useVMCGeometry();		
-	void         setSiMat(StiMaterial     *m) {_siMat = m;}
-	void         setHybridMat(StiMaterial *m) {_hybridMat = m;}
-	StiMaterial *getSiMat()    {return _siMat;}
-	StiMaterial *getHybridMat(){return _hybridMat;}
- 
- protected:
+protected:
 
-	StSsdBarrel *mySsd;
-	StiMaterial *_siMat;
-	StiMaterial *_hybridMat;
-	ssdWafersPosition_st *ssdWafersPosition(Int_t Id, St_ssdWafersPosition *wafers);
+   StSsdBarrel *mySsd;
+   StiMaterial *_siMat;
+   StiMaterial *_hybridMat;
+   ssdWafersPosition_st *ssdWafersPosition(Int_t Id, St_ssdWafersPosition *wafers);
 
- private:
+private:
 
-	void buildInactiveVolumes();
+   void buildInactiveVolumes();
 };
-#endif 
+#endif
-- 
1.8.2.GIT


From 2607b157228ebd7c5bb780b4fd88bc906d4368e0 Mon Sep 17 00:00:00 2001
From: Dmitri Smirnov <d.s@plexoos.com>
Date: Mon, 12 May 2014 12:38:00 -0400
Subject: [PATCH 04/10] Renamed StiSsdDetectorBuilder to StiSstDetectorBuilder

---
 StiSsd/StiSstDetectorBuilder.cxx | 23 +++++++++++------------
 StiSsd/StiSstDetectorBuilder.h   | 11 ++++++-----
 2 files changed, 17 insertions(+), 17 deletions(-)

diff --git a/StiSsd/StiSstDetectorBuilder.cxx b/StiSsd/StiSstDetectorBuilder.cxx
index df8087a..9be49ae 100644
--- a/StiSsd/StiSstDetectorBuilder.cxx
+++ b/StiSsd/StiSstDetectorBuilder.cxx
@@ -81,27 +81,27 @@ using namespace std;
 #include "Sti/StiIsActiveFunctor.h"
 #include "Sti/StiNeverActiveFunctor.h"
 #include "StiSsd/StiSsdIsActiveFunctor.h"
-#include "StiSsd/StiSsdDetectorBuilder.h"
+#include "StiSsd/StiSstDetectorBuilder.h"
 #include "StSsdUtil/StSsdBarrel.hh"
 #include "StDetectorDbMaker/StiSsdHitErrorCalculator.h"
 
-StiSsdDetectorBuilder::StiSsdDetectorBuilder(bool active, const string &inputFile)
+StiSstDetectorBuilder::StiSstDetectorBuilder(bool active, const string &inputFile)
    : StiDetectorBuilder("Ssd", active, inputFile), _siMat(0), _hybridMat(0)
 {
    // Hit error parameters : it is set to 20 microns, in both x and y coordinates
 }
 
-StiSsdDetectorBuilder::~StiSsdDetectorBuilder()
+StiSstDetectorBuilder::~StiSstDetectorBuilder()
 {}
 
-void StiSsdDetectorBuilder::buildDetectors(StMaker &source)
+void StiSstDetectorBuilder::buildDetectors(StMaker &source)
 {
-   gMessMgr->Info() << "StiSsdDetectorBuilder::buildDetectors() - I - Started " << endm;
+   gMessMgr->Info() << "StiSstDetectorBuilder::buildDetectors() - I - Started " << endm;
    //StSsdBarrel *mySsd = StSsdBarrel::Instance();
    mySsd = StSsdBarrel::Instance();
 
    if (! mySsd) {// no active SSD
-      gMessMgr->Info() << "StiSsdDetectorBuilder::buildDetectors() - I - there is no SSD barrel - take whatever exist in GEANT" << endm;
+      gMessMgr->Info() << "StiSstDetectorBuilder::buildDetectors() - I - there is no SSD barrel - take whatever exist in GEANT" << endm;
       StiVMCToolKit::GetVMC();
       return;
    }
@@ -118,10 +118,9 @@ void StiSsdDetectorBuilder::buildDetectors(StMaker &source)
    }
 }
 
-void StiSsdDetectorBuilder::useVMCGeometry()
+void StiSstDetectorBuilder::useVMCGeometry()
 {
-   cout << "StiSsdDetectorBuilder::buildDetectors() -I- Use VMC geometry" << endl;
-   SetCurrentDetectorBuilder(this);
+   cout << "StiSstDetectorBuilder::buildDetectors() -I- Use VMC geometry" << endl;
 
    //build the material
    struct Material_t {
@@ -155,7 +154,7 @@ void StiSsdDetectorBuilder::useVMCGeometry()
 
    StiElossCalculator *siElossCalculator = new StiElossCalculator(_siMat->getZOverA(), ionization * ionization, _siMat->getA(), _siMat->getZ(), _siMat->getDensity());
 
-   cout << "StiSsdDetectorBuilder::buildMaterials() - I - Done " << endl;
+   cout << "StiSstDetectorBuilder::buildMaterials() - I - Done " << endl;
 
    ssdDimensions_st *dimensions = mySsd->getDimensions();
    Int_t NL = mySsd->getNumberOfLadders();
@@ -240,7 +239,7 @@ void StiSsdDetectorBuilder::useVMCGeometry()
    }
 }
 
-void StiSsdDetectorBuilder::buildInactiveVolumes()
+void StiSstDetectorBuilder::buildInactiveVolumes()
 {
    // Build average inactive volumes
    const VolumeMap_t SsdVolumes[] = {
@@ -289,7 +288,7 @@ void StiSsdDetectorBuilder::buildInactiveVolumes()
    }
 }
 
-ssdWafersPosition_st *StiSsdDetectorBuilder::ssdWafersPosition(Int_t Id, St_ssdWafersPosition *wafers)
+ssdWafersPosition_st *StiSstDetectorBuilder::ssdWafersPosition(Int_t Id, St_ssdWafersPosition *wafers)
 {
    Int_t N = wafers->GetNRows();
    ssdWafersPosition_st *wafer = wafers->GetTable();
diff --git a/StiSsd/StiSstDetectorBuilder.h b/StiSsd/StiSstDetectorBuilder.h
index 0846978..1b409cf 100644
--- a/StiSsd/StiSstDetectorBuilder.h
+++ b/StiSsd/StiSstDetectorBuilder.h
@@ -26,21 +26,22 @@
 
 This class is the description of the StiSsdDetectorBuilder
 */
-#ifndef StiSsdDetectorBuilder_H
-#define StiSsdDetectorBuilder_H
+#ifndef StiSstDetectorBuilder_H
+#define StiSstDetectorBuilder_H
+
 #include "Sti/StiDetectorBuilder.h"
 #include "StDetectorDbMaker/StiHitErrorCalculator.h"
 #include "StThreeVector.hh"
 class StSsdBarrel;
 class ssdWafersPosition_st;
 class St_ssdWafersPosition;
-class StiSsdDetectorBuilder : public StiDetectorBuilder
+class StiSstDetectorBuilder : public StiDetectorBuilder
 {
 
 public:
 
-   StiSsdDetectorBuilder(bool active, const string &inputFile);
-   virtual ~StiSsdDetectorBuilder();
+   StiSstDetectorBuilder(bool active, const string &inputFile);
+   virtual ~StiSstDetectorBuilder();
    virtual void buildDetectors(StMaker &source);
    virtual void useVMCGeometry();
    void         setSiMat(StiMaterial     *m) {_siMat = m;}
-- 
1.8.2.GIT


From f20b4a434ee2d0d259442cb4e2d59c93f558f143 Mon Sep 17 00:00:00 2001
From: Dmitri Smirnov <d.s@plexoos.com>
Date: Mon, 12 May 2014 11:13:42 -0400
Subject: [PATCH 05/10] A baby step closer to real SSD geometry (clean up)

---
 StiSsd/StiSstDetectorBuilder.cxx | 5 +----
 1 file changed, 1 insertion(+), 4 deletions(-)

diff --git a/StiSsd/StiSstDetectorBuilder.cxx b/StiSsd/StiSstDetectorBuilder.cxx
index 9be49ae..7bcc4f7 100644
--- a/StiSsd/StiSstDetectorBuilder.cxx
+++ b/StiSsd/StiSstDetectorBuilder.cxx
@@ -280,10 +280,7 @@ void StiSstDetectorBuilder::buildInactiveVolumes()
       // Modify dimensions of the mother volume
       if (string(SsdVolumes[i].name) == string("IBMO1")) {
          StiCylindricalShape *stiShape = (StiCylindricalShape *) stiDetector->getShape();
-         stiShape->setHalfDepth(45);
-
-         StiPlacement *stiPlacement = stiDetector->getPlacement();
-         stiPlacement->setZcenter(-5);
+         stiShape->setThickness(stiShape->getThickness()/2);
       }
    }
 }
-- 
1.8.2.GIT


From 0b2b5a561a0eef00c452066d343b867b39b785d8 Mon Sep 17 00:00:00 2001
From: Dmitri Smirnov <d.s@plexoos.com>
Date: Mon, 12 May 2014 11:20:19 -0400
Subject: [PATCH 06/10] Further clean up to match the StIstDetectorBuilder

---
 StiSsd/StiSstDetectorBuilder.cxx | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/StiSsd/StiSstDetectorBuilder.cxx b/StiSsd/StiSstDetectorBuilder.cxx
index 7bcc4f7..33522c6 100644
--- a/StiSsd/StiSstDetectorBuilder.cxx
+++ b/StiSsd/StiSstDetectorBuilder.cxx
@@ -106,8 +106,9 @@ void StiSstDetectorBuilder::buildDetectors(StMaker &source)
       return;
    }
 
-   int nRows = 1 ;
-   setNRows(nRows);
+   setNRows(1);
+
+   SetCurrentDetectorBuilder(this);
 
    // Gas material must be defined. Here we use air properties
    _gasMat = add(new StiMaterial("PixelAir", 7.3, 14.61, 0.001205, 30420.*0.001205, 7.3 * 12.e-9));
@@ -239,6 +240,11 @@ void StiSstDetectorBuilder::useVMCGeometry()
    }
 }
 
+/**
+ * Creates a crude approximation of the SSD/T detector. The geometry is modeled
+ * with a single tube using the dimensions and other physical properties of the
+ * IST mother volume defined in the ROOT TGeo geometry.
+ */
 void StiSstDetectorBuilder::buildInactiveVolumes()
 {
    // Build average inactive volumes
-- 
1.8.2.GIT


From 63c238eee8edc42c008457820c903548b275d6a9 Mon Sep 17 00:00:00 2001
From: Dmitri Smirnov <d.s@plexoos.com>
Date: Mon, 12 May 2014 12:23:25 -0400
Subject: [PATCH 07/10] Remove CVS log messages and keywords

---
 StiSsd/StiSstDetectorBuilder.cxx | 60 ----------------------------------------
 StiSsd/StiSstDetectorBuilder.h   | 29 +------------------
 2 files changed, 1 insertion(+), 88 deletions(-)

diff --git a/StiSsd/StiSstDetectorBuilder.cxx b/StiSsd/StiSstDetectorBuilder.cxx
index 33522c6..cfa4a20 100644
--- a/StiSsd/StiSstDetectorBuilder.cxx
+++ b/StiSsd/StiSstDetectorBuilder.cxx
@@ -1,63 +1,3 @@
-// $Id$
-//
-// $Log$
-// Revision 1.1  2014/06/06 21:15:44  smirnovd
-// Add patches for StSsdDbMaker and StiSsd
-//
-// Revision 1.36  2013/03/22 23:58:51  fisyak
-// Remove name[50]
-//
-// Revision 1.35  2011/04/22 22:00:39  fisyak
-// warn off
-//
-// Revision 1.34  2010/08/25 21:57:42  fisyak
-// Get rid off access to specfic detector tracking parameters which usage has been  disable since 2008/06/11
-//
-// Revision 1.33  2009/03/16 13:50:15  fisyak
-// Move out all Sti Chairs into StDetectorDb
-//
-// Revision 1.32  2008/08/12 20:54:40  fisyak
-// If StSsdBarrel does not exist then take SSD as dead material from whatever exist in GEANT
-//
-// Revision 1.31  2008/06/12 16:36:55  fisyak
-// Remove all SSD endcap volumes
-//
-// Revision 1.30  2008/06/11 22:04:39  fisyak
-// Add dead material
-//
-// Revision 1.29  2008/04/03 20:04:22  fisyak
-// Straighten out DB access via chairs
-//
-// Revision 1.28  2007/07/12 20:39:13  fisyak
-// Remove default errors for SSD
-//
-// Revision 1.27  2007/03/21 17:53:38  fisyak
-// make use for new StSsdBarrel
-//
-// Revision 1.26  2006/10/17 20:18:05  fisyak
-// Add handle when SVTT mother volume is missing
-//
-// Revision 1.25  2006/10/16 20:31:17  fisyak
-// Clean dependencies from Sti useless classes
-//
-// Revision 1.24  2006/10/09 15:47:59  fisyak
-// use Normal represantation, remove StiDedxCalculator
-//
-// Revision 1.23  2006/06/28 18:51:46  fisyak
-// Add loading of tracking and hit error parameters from DB
-//
-// Revision 1.22  2006/05/31 04:00:02  fisyak
-// remove SSD ladder mother volume
-//
-// Revision 1.21  2005/06/21 16:35:01  lmartin
-// DetectorBuilder updated with the correct methods from StSsdUtil
-//
-// Revision 1.20  2005/06/21 15:31:47  lmartin
-// CVS tags added
-//
-/*!
- * \class StiSsdDetectorBuilder
- * \author Christelle Roy
- * \date 02/27/04
- */
-
 #include <stdio.h>
 #include <assert.h>
 #include <map>
diff --git a/StiSsd/StiSstDetectorBuilder.h b/StiSsd/StiSstDetectorBuilder.h
index 1b409cf..bc73ea3 100644
--- a/StiSsd/StiSstDetectorBuilder.h
+++ b/StiSsd/StiSstDetectorBuilder.h
@@ -1,37 +1,10 @@
-// $Id$
-//
-// $Log$
-// Revision 1.1  2014/06/06 21:15:44  smirnovd
-// Add patches for StSsdDbMaker and StiSsd
-//
-// Revision 1.13  2009/03/16 13:50:09  fisyak
-// Move out all Sti Chairs into StDetectorDb
-//
-// Revision 1.12  2008/04/03 20:04:22  fisyak
-// Straighten out DB access via chairs
-//
-// Revision 1.11  2006/10/09 15:47:59  fisyak
-// use Normal represantation, remove StiDedxCalculator
-//
-// Revision 1.10  2006/06/28 18:51:46  fisyak
-// Add loading of tracking and hit error parameters from DB
-//
-// Revision 1.9  2005/06/21 16:35:01  lmartin
-// DetectorBuilder updated with the correct methods from StSsdUtil
-//
-// Revision 1.8  2005/06/21 15:31:47  lmartin
-// CVS tags added
-//
-/*!
- * \class StiSsdDetectorBuilder
- * \author Christelle Roy
- * \date 02/27/04
-
-This class is the description of the StiSsdDetectorBuilder
-*/
 #ifndef StiSstDetectorBuilder_H
 #define StiSstDetectorBuilder_H
 
 #include "Sti/StiDetectorBuilder.h"
 #include "StDetectorDbMaker/StiHitErrorCalculator.h"
 #include "StThreeVector.hh"
+
 class StSsdBarrel;
 class ssdWafersPosition_st;
 class St_ssdWafersPosition;
-- 
1.8.2.GIT


From ae97ea9b24abc1a150c1e58805cf61d7eef49a3e Mon Sep 17 00:00:00 2001
From: Dmitri Smirnov <d.s@plexoos.com>
Date: Mon, 19 May 2014 13:43:14 -0400
Subject: [PATCH 08/10] New StiSst* files to support SST

---
 StiSsd/StiSstDetectorGroup.cxx | 18 ++++++++++++++++++
 StiSsd/StiSstDetectorGroup.h   | 20 ++++++++++++++++++++
 2 files changed, 38 insertions(+)
 create mode 100644 StiSsd/StiSstDetectorGroup.cxx
 create mode 100644 StiSsd/StiSstDetectorGroup.h

diff --git a/StiSsd/StiSstDetectorGroup.cxx b/StiSsd/StiSstDetectorGroup.cxx
new file mode 100644
index 0000000..88fe92d
--- /dev/null
+++ b/StiSsd/StiSstDetectorGroup.cxx
@@ -0,0 +1,18 @@
+#include "StiSsd/StiSstDetectorGroup.h"
+#include "StiSsd/StiSsdHitLoader.h"
+#include "StiSsd/StiSstDetectorBuilder.h"
+#include "Sti/StiElossCalculator.h"
+#include "StEvent.h"
+#include <stdexcept>
+
+StiSstDetectorGroup::StiSstDetectorGroup(bool active, const string & inputFile)
+  : StiDetectorGroup<StEvent>("SSD",
+			      active?new StiSsdHitLoader():0,
+			      new StiSstDetectorBuilder(active,inputFile),0)
+
+{}
+
+StiSstDetectorGroup::~StiSstDetectorGroup()
+{}
+
+
diff --git a/StiSsd/StiSstDetectorGroup.h b/StiSsd/StiSstDetectorGroup.h
new file mode 100644
index 0000000..57fc993
--- /dev/null
+++ b/StiSsd/StiSstDetectorGroup.h
@@ -0,0 +1,20 @@
+#ifndef StiSstDetectorGroup_H_INCLUDED
+#define StiSstDetectorGroup_H_INCLUDED
+
+#include "Sti/StiDetectorGroup.h"
+class StEvent;
+class StiDetectorBuilder;
+
+/*! Convenience class defining the SST detector group
+  <p>
+  \author Christelle Roy, Subatech
+*/
+class StiSstDetectorGroup : public StiDetectorGroup<StEvent>
+{
+  public:
+  StiSstDetectorGroup(bool active, const string & inputFile);
+  ~StiSstDetectorGroup();
+};
+
+#endif
+
-- 
1.8.2.GIT


From 53c514c35ebf16becdc97c2eb1c494d9237123f4 Mon Sep 17 00:00:00 2001
From: Dmitri Smirnov <d.s@plexoos.com>
Date: Tue, 20 May 2014 15:18:14 -0400
Subject: [PATCH 09/10] Remove unused includes from
 StiSsd/StiSstDetectorBuilder.cxx

---
 StiSsd/StiSstDetectorBuilder.cxx | 2 --
 1 file changed, 2 deletions(-)

diff --git a/StiSsd/StiSstDetectorBuilder.cxx b/StiSsd/StiSstDetectorBuilder.cxx
index cfa4a20..4d278b1 100644
--- a/StiSsd/StiSstDetectorBuilder.cxx
+++ b/StiSsd/StiSstDetectorBuilder.cxx
@@ -19,8 +19,6 @@ using namespace std;
 #include "Sti/StiElossCalculator.h"
 #include "StDetectorDbMaker/StiHitErrorCalculator.h"
 #include "Sti/StiIsActiveFunctor.h"
-#include "Sti/StiNeverActiveFunctor.h"
-#include "StiSsd/StiSsdIsActiveFunctor.h"
 #include "StiSsd/StiSstDetectorBuilder.h"
 #include "StSsdUtil/StSsdBarrel.hh"
 #include "StDetectorDbMaker/StiSsdHitErrorCalculator.h"
-- 
1.8.2.GIT


From 64d4bf41e97010e95baf05695678c9c62857769b Mon Sep 17 00:00:00 2001
From: Dmitri Smirnov <d.s@plexoos.com>
Date: Mon, 12 May 2014 11:12:37 -0400
Subject: [PATCH 10/10] Variable names changed according to STAR guidelines.
 Resolve variable name conflict. Minor comment changes

---
 StiSsd/StiSstDetectorBuilder.cxx | 62 +++++++++++++++++++---------------------
 1 file changed, 30 insertions(+), 32 deletions(-)

diff --git a/StiSsd/StiSstDetectorBuilder.cxx b/StiSsd/StiSstDetectorBuilder.cxx
index 4d278b1..f1ad457 100644
--- a/StiSsd/StiSstDetectorBuilder.cxx
+++ b/StiSsd/StiSstDetectorBuilder.cxx
@@ -100,12 +100,12 @@ void StiSstDetectorBuilder::useVMCGeometry()
    Int_t NW = mySsd->getNWaferPerLadder();
 
    // use 1 ladder to get the dimension
-   StSsdLadder *Ladder = mySsd->getLadder(0);
-   assert(Ladder);
-   StSsdWafer *Wafer1 = Ladder->getWafer(0);
-   StSsdWafer *Wafer2 = Ladder->getWafer(NW - 1);
-   assert(Wafer1 && Wafer2);
-   Double_t width = TMath::Abs(Wafer1->x(2) - Wafer2->x(2)) / 2. + 2;
+   StSsdLadder *ladder = mySsd->getLadder(0);
+   assert(ladder);
+   StSsdWafer *wafer1 = ladder->getWafer(0);
+   StSsdWafer *wafer2 = ladder->getWafer(NW - 1);
+   assert(wafer1 && wafer2);
+   Double_t width = TMath::Abs(wafer1->x(2) - wafer2->x(2)) / 2. + 2;
    StiPlanarShape *ladderShape = new StiPlanarShape("SsdLadder",
          width,
          0.34, // increas by a factor ~10 2*dimensions->waferHalfThickness,
@@ -121,20 +121,20 @@ void StiSstDetectorBuilder::useVMCGeometry()
      ----> ladder # 1  ===> module 7101
      ----> ladder # 20 ===> module 7120
    */
-   for (Int_t ladder = 0; ladder < NL; ladder++) {
-      Ladder = mySsd->getLadder(ladder);
+   for (Int_t iLadder = 0; iLadder < NL; iLadder++) {
+      ladder = mySsd->getLadder(iLadder);
 
-      if (! Ladder) continue;
+      if (! ladder) continue;
 
-      Wafer1 = Ladder->getWafer(0);
-      Wafer2 = Ladder->getWafer(NW - 1);
+      wafer1 = ladder->getWafer(0);
+      wafer2 = ladder->getWafer(NW - 1);
 
-      if (! Wafer1 || ! Wafer2) continue;
+      if (! wafer1 || ! wafer2) continue;
 
-      StThreeVectorD centerVector1(Wafer1->x(0), Wafer1->x(1), Wafer1->x(2));
-      StThreeVectorD normalVector1(Wafer1->n(0), Wafer1->n(1), Wafer1->n(2));
-      StThreeVectorD centerVector2(Wafer2->x(0), Wafer2->x(1), Wafer2->x(2));
-      StThreeVectorD normalVector2(Wafer2->n(0), Wafer2->n(1), Wafer2->n(2));
+      StThreeVectorD centerVector1(wafer1->x(0), wafer1->x(1), wafer1->x(2));
+      StThreeVectorD normalVector1(wafer1->n(0), wafer1->n(1), wafer1->n(2));
+      StThreeVectorD centerVector2(wafer2->x(0), wafer2->x(1), wafer2->x(2));
+      StThreeVectorD normalVector2(wafer2->n(0), wafer2->n(1), wafer2->n(2));
       StThreeVectorD centerVector = centerVector1 + centerVector2; centerVector *= 0.5;
       StThreeVectorD normalVector = normalVector1 + normalVector2; normalVector *= 0.5;
       Double_t prod = centerVector * normalVector;
@@ -144,7 +144,7 @@ void StiSstDetectorBuilder::useVMCGeometry()
       double phi  = centerVector.phi();
       double phiD = normalVector.phi();
       double r = centerVector.perp();
-      cout << "Det Id = " << Wafer1->getId() << "\tcv\t:" << centerVector << "\tphi:\t" << phi << "\tr:\t" << r << "\tz:\t" << centerVector.z() << endl;
+      cout << "Det Id = " << wafer1->getId() << "\tcv\t:" << centerVector << "\tphi:\t" << phi << "\tr:\t" << r << "\tz:\t" << centerVector.z() << endl;
       StiPlacement *pPlacement = new StiPlacement;
       pPlacement->setZcenter(centerVector.z());
       // centerVector.z can be different than with this definition
@@ -157,7 +157,7 @@ void StiSstDetectorBuilder::useVMCGeometry()
 
       //Build final detector object
       StiDetector *pLadder = _detectorFactory->getInstance();
-      pLadder->setName(Form("Ssd/Layer_%d/Ladder_%d/Wafers", layer, ladder));
+      pLadder->setName(Form("Ssd/Layer_%d/Ladder_%d/Wafers", layer, iLadder));
       pLadder->setIsOn(kTRUE);
       pLadder->setIsActive(new StiIsActiveFunctor(_active));
       pLadder->setIsContinuousMedium(false);
@@ -172,9 +172,9 @@ void StiSstDetectorBuilder::useVMCGeometry()
       pLadder->setPlacement(pPlacement);
       pLadder->setHitErrorCalculator(StiSsdHitErrorCalculator::instance());
       pLadder->setKey(1, 0);
-      pLadder->setKey(2, ladder - 1);
+      pLadder->setKey(2, iLadder - 1);
       pLadder->setElossCalculator(siElossCalculator);
-      add(layer, ladder, pLadder);
+      add(layer, iLadder, pLadder);
    }
 }
 
@@ -186,21 +186,19 @@ void StiSstDetectorBuilder::useVMCGeometry()
 void StiSstDetectorBuilder::buildInactiveVolumes()
 {
    // Build average inactive volumes
-   const VolumeMap_t SsdVolumes[] = {
-      // SSD
-      //  {"SFMO", "the mother of all Silicon Strip Detector volumes","HALL_1/CAVE_1/SVTT_1/SFMO_1","",""}, // 17.466824 [kg]
-      {"SFMO1", "the mother of the ladder", "HALL_1/CAVE_1/TpcRefSys_1/IDSM_1/SFMO_1", "", ""}          //  0.546171 [kg]
+   const VolumeMap_t volumes[] = {
+      {"SFMO1", "the mother of all Silicon Strip Detector volumes", "HALL_1/CAVE_1/TpcRefSys_1/IDSM_1/SFMO_1", "", ""}          //  0.546171 [kg]
    };
 
    // Build the volume map and loop over all found volumes
-   Int_t NoSsdVols = sizeof(SsdVolumes) / sizeof(VolumeMap_t);
+   Int_t nVolumes = sizeof(volumes) / sizeof(VolumeMap_t);
    gGeoManager->RestoreMasterVolume();
    gGeoManager->CdTop();
 
-   for (Int_t i = 0; i < NoSsdVols; i++) {
+   for (Int_t i = 0; i < nVolumes; i++) {
 
-      if ( !gGeoManager->cd(SsdVolumes[i].path) ) {
-         Warning("buildInactiveVolumes()", "Cannot find path to %s node. Skipping to next node...", SsdVolumes[i].name);
+      if ( !gGeoManager->cd(volumes[i].path) ) {
+         Warning("buildInactiveVolumes()", "Cannot find path to %s node. Skipping to next node...", volumes[i].name);
          continue;
       }
 
@@ -208,21 +206,21 @@ void StiSstDetectorBuilder::buildInactiveVolumes()
 
       if (!geoNode) continue;
 
-      LOG_DEBUG << "Current node : " << i << "/" << NoSsdVols << " path is : " << SsdVolumes[i].name << endm;
+      LOG_DEBUG << "Current node : " << i << "/" << nVolumes << " path is : " << volumes[i].name << endm;
       LOG_DEBUG << "Number of daughters : " << geoNode->GetNdaughters() << " weight : " << geoNode->GetVolume()->Weight() << endm;
 
-      StiVMCToolKit::LoopOverNodes(geoNode, SsdVolumes[i].path, SsdVolumes[i].name, MakeAverageVolume);
+      StiVMCToolKit::LoopOverNodes(geoNode, volumes[i].path, volumes[i].name, MakeAverageVolume);
 
       // Access last added volume
       int row = getNRows() - 1;
       int sector = 0;
 
-      // Make Sti detector active, i.e. use it in tracking
+      // Make Sti detector active, i.e. use it in tracking. XXX:ds: Not sure it has any effect but should not hurt
       StiDetector *stiDetector = getDetector(row, sector);
       stiDetector->setIsOn(true);
 
       // Modify dimensions of the mother volume
-      if (string(SsdVolumes[i].name) == string("IBMO1")) {
+      if (string(volumes[i].name) == string("SFMO1")) {
          StiCylindricalShape *stiShape = (StiCylindricalShape *) stiDetector->getShape();
          stiShape->setThickness(stiShape->getThickness()/2);
       }
-- 
1.8.2.GIT

