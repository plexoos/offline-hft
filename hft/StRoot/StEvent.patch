From b8270403bda788961e1d4cefba89b591e236b261 Mon Sep 17 00:00:00 2001
From: Dmitri Smirnov <d.s@plexoos.com>
Date: Thu, 20 Mar 2014 14:12:06 -0400
Subject: [PATCH 1/2] New StEvent files for IST detector

---
 StEvent/StIstHit.cxx                 | 102 +++++++++++++++++++++++++++++++++
 StEvent/StIstHit.h                   | 107 +++++++++++++++++++++++++++++++++++
 StEvent/StIstHitCollection.cxx       |  95 +++++++++++++++++++++++++++++++
 StEvent/StIstHitCollection.h         |  69 ++++++++++++++++++++++
 StEvent/StIstLadderHitCollection.cxx |  73 ++++++++++++++++++++++++
 StEvent/StIstLadderHitCollection.h   |  56 ++++++++++++++++++
 StEvent/StIstSensorHitCollection.cxx |  53 +++++++++++++++++
 StEvent/StIstSensorHitCollection.h   |  47 +++++++++++++++
 8 files changed, 602 insertions(+)
 create mode 100644 StEvent/StIstHit.cxx
 create mode 100644 StEvent/StIstHit.h
 create mode 100644 StEvent/StIstHitCollection.cxx
 create mode 100644 StEvent/StIstHitCollection.h
 create mode 100644 StEvent/StIstLadderHitCollection.cxx
 create mode 100644 StEvent/StIstLadderHitCollection.h
 create mode 100644 StEvent/StIstSensorHitCollection.cxx
 create mode 100644 StEvent/StIstSensorHitCollection.h

diff --git a/StEvent/StIstHit.cxx b/StEvent/StIstHit.cxx
new file mode 100644
index 0000000..c684c6a
--- /dev/null
+++ b/StEvent/StIstHit.cxx
@@ -0,0 +1,102 @@
+/***************************************************************************
+*
+* $Id$
+*
+* Author: Yaping Wang, March 2013
+****************************************************************************
+* Description:
+* See header file.
+****************************************************************************
+*
+* $Log$
+* Revision 1.6  2014/03/20 20:44:36  smirnovd
+* Updated StEvent patch to include new files. The patch includes differences w.r.t. tag SL14C in CVS
+*
+* Revision 1.8  2014/03/13 22:10:30  smirnovd
+* Expand tabs and trim trailing whitespace
+*
+* Revision 1.7  2014/03/13 22:10:21  smirnovd
+* Fixed constructor's initialization list
+*
+* Revision 1.6  2014/03/13 22:10:12  smirnovd
+* Move some constants from StIstUtil/StIstConsts.h to StEvent/StEnumerations.h to avoid external dependance of StEvent on StIstUtil
+*
+* Revision 1.5  2014/02/26 21:18:08  smirnovd
+* Style corrected with astyle -s3 -p -H -A3 -k3 -O -o -y -Y -f
+*
+* Revision 1.4  2014/02/26 01:35:36  ypwang
+* get rid of meanColumn/meanRow/Apv transformations and local position uncertainties to avoid external constants access
+*
+* Revision 1.3  2014/02/25 17:04:50  ypwang
+* get rid of mClusteringType and its accessory/modifier functions
+*
+* Revision 1.2  2014/01/29 18:25:00  ypwang
+* updating scripts
+*
+*
+****************************************************************************
+* StIstHit.cxx,v 1.0
+* Revision 1.0 2013/11/04 15:25:30 Yaping
+* Initial version
+****************************************************************************/
+
+#include "StIstHit.h"
+
+
+StIstHit::StIstHit(unsigned char ladder, unsigned char sensor, float charge, float chargeErr, unsigned char maxTB,
+   unsigned char nRawHits, unsigned char nRawHitsZ, unsigned char nRawHitsRPhi) : StHit(),
+   mMaxTimeBin(maxTB),
+   mChargeErr(chargeErr),
+   mNRawHits(nRawHits),
+   mNRawHitsZ(nRawHitsZ),
+   mNRawHitsRPhi(nRawHitsRPhi),
+   mLocalPosition(),
+   mDetectorId(kIstId)
+{
+   StHit::setHardwarePosition((ladder - 1)*kIstNumSensorsPerLadder + sensor);
+   StHit::setCharge(charge);
+}
+
+
+StIstHit::StIstHit(const StThreeVectorF &p, const StThreeVectorF &e, unsigned int hw, float q, unsigned char c) :
+   StHit(p, e, hw, q, c),
+   mMaxTimeBin(0),
+   mChargeErr(0),
+   mNRawHits(1),
+   mNRawHitsZ(0),
+   mNRawHitsRPhi(0),
+   mLocalPosition(),
+   mDetectorId(kIstId)
+{
+}
+
+
+StDetectorId StIstHit::detector() const {return mDetectorId;}
+
+void StIstHit::setDetectorId(StDetectorId id) {mDetectorId = id;}
+
+void StIstHit::setLocalPosition(float vRPhi, float vY, float vZ)
+{
+   mLocalPosition[0] = vRPhi;
+   mLocalPosition[1] = vY;
+   mLocalPosition[2] = vZ;
+}
+
+float StIstHit::localPosition(unsigned int i) const
+{
+   if (i < 3)
+      return mLocalPosition[i];
+   else
+      return 0;
+}
+
+ostream &operator<<(ostream &os, const StIstHit &hit)
+{
+   os << "IST Hit -I- ladder: " << static_cast<int>(hit.getLadder())
+      << " sensor: " << static_cast<int>(hit.getSensor())
+      << " localPosition[0]/localPosition[2] : " << hit.localPosition(0)
+      << "/" << hit.localPosition(2)
+      << " ADC : " << hit.charge() << "+-" << hit.getChargeErr()
+      << " detector: " << hit.detector()
+      << endl;
+   return os;
+}
+
+ClassImp(StIstHit);
diff --git a/StEvent/StIstHit.h b/StEvent/StIstHit.h
new file mode 100644
index 0000000..c4cf0ae
--- /dev/null
+++ b/StEvent/StIstHit.h
@@ -0,0 +1,107 @@
+/***************************************************************************
+*
+* $Id$
+*
+* Author: Yaping Wang, March 2013
+****************************************************************************
+* Description:
+* Data structure for individual IST hit (a 1D cluster).
+****************************************************************************
+*
+* $Log$
+* Revision 1.6  2014/03/20 20:44:36  smirnovd
+* Updated StEvent patch to include new files. The patch includes differences w.r.t. tag SL14C in CVS
+*
+* Revision 1.10  2014/03/13 22:17:09  smirnovd
+* Minor whitespace alignment fixes
+*
+* Revision 1.9  2014/03/13 22:10:30  smirnovd
+* Expand tabs and trim trailing whitespace
+*
+* Revision 1.8  2014/03/13 22:10:21  smirnovd
+* Fixed constructor's initialization list
+*
+* Revision 1.7  2014/03/13 22:10:12  smirnovd
+* Move some constants from StIstUtil/StIstConsts.h to StEvent/StEnumerations.h to avoid external dependance of StEvent on StIstUtil
+*
+* Revision 1.6  2014/02/26 21:18:08  smirnovd
+* Style corrected with astyle -s3 -p -H -A3 -k3 -O -o -y -Y -f
+*
+* Revision 1.5  2014/02/26 01:35:36  ypwang
+* get rid of meanColumn/meanRow/Apv transformations and local position uncertainties to avoid external constants access
+*
+* Revision 1.4  2014/02/25 17:04:50  ypwang
+* get rid of mClusteringType and its accessory/modifier functions
+*
+*
+****************************************************************************
+* StIstHit.h,v 1.0
+* Revision 1.0 2013/11/04 15:25:30 Yaping
+* Initial version
+****************************************************************************/
+
+#ifndef StIstHit_hh
+#define StIstHit_hh
+
+#include "StHit.h"
+#include "StEvent/StEnumerations.h"
+
+using namespace StIstConsts;
+
+class StIstHit : public StHit
+{
+public:
+   StIstHit(unsigned char ladder = -1, unsigned char sensor = -1, float Charge = 0., float ChargeErr = 0.,
+      unsigned char maxTB = 0, unsigned char nRawHits = 1, unsigned char nRawHitsZ = 0,
+      unsigned char nRawHitsRPhi = 0);
+   StIstHit(const StThreeVectorF &position, const StThreeVectorF &error, unsigned int hwPosition, float charge,
+      unsigned char trackRefCount = 0);
+
+   virtual StDetectorId detector() const;
+   void    setDetectorId(StDetectorId);
+
+   //accessories
+   unsigned char getLadder() const;
+   unsigned char getSensor() const;
+   unsigned char getMaxTimeBin() const;
+   float         getChargeErr() const;
+   unsigned char getNRawHits() const;
+   unsigned char getNRawHitsZ() const;
+   unsigned char getNRawHitsRPhi() const;
+   float         localPosition(unsigned int ) const;
+
+   //modifiers
+   void setMaxTimeBin(unsigned char tb);
+   void setChargeErr(float chargeErr);
+   void setNRawHits(unsigned char nRawHits);//cluster size
+   void setNRawHitsZ(unsigned char nRawHitsZ);
+   void setNRawHitsRPhi(unsigned char nRawHitsRPhi);
+   void setLocalPosition(float, float, float);
+
+protected:
+   UChar_t mMaxTimeBin;        // max charge time bin
+   Float_t mChargeErr;         // charge uncertainty
+   UChar_t mNRawHits;          // nRawHits: cluster size
+   UChar_t mNRawHitsZ;         // cluster size in Z direction
+   UChar_t mNRawHitsRPhi;      // cluster size in r-phi direction
+   Float_t mLocalPosition[3];  //local position of hit inside the sensor
+   StDetectorId mDetectorId;
+
+   ClassDef(StIstHit, 1)
+};
+
+ostream &operator<<(ostream &, const StIstHit &);
+
+////////////////////////
+inline unsigned char StIstHit::getLadder() const          { return 1 + (mHardwarePosition - 1) / kIstNumSensorsPerLadder;};
+inline unsigned char StIstHit::getSensor() const          { return 1 + (mHardwarePosition - 1) % kIstNumSensorsPerLadder;};
+inline unsigned char StIstHit::getMaxTimeBin() const      { return mMaxTimeBin;         };
+inline float StIstHit::getChargeErr()    const            { return mChargeErr;          };
+inline unsigned char StIstHit::getNRawHits() const        { return mNRawHits;           };
+inline unsigned char StIstHit::getNRawHitsZ() const       { return mNRawHitsZ;          };
+inline unsigned char StIstHit::getNRawHitsRPhi() const    { return mNRawHitsRPhi;       };
+
+inline void StIstHit::setMaxTimeBin(unsigned char tb)                   { mMaxTimeBin = tb;             };
+inline void StIstHit::setChargeErr(float chargeErr)                     { mChargeErr = chargeErr;       };
+inline void StIstHit::setNRawHits(unsigned char nRawHits)               { mNRawHits = nRawHits;         };
+inline void StIstHit::setNRawHitsZ(unsigned char nRawHitsZ)             { mNRawHitsZ = nRawHitsZ;       };
+inline void StIstHit::setNRawHitsRPhi(unsigned char nRawHitsRPhi)       { mNRawHitsRPhi = nRawHitsRPhi; };
+
+#endif
diff --git a/StEvent/StIstHitCollection.cxx b/StEvent/StIstHitCollection.cxx
new file mode 100644
index 0000000..0401402
--- /dev/null
+++ b/StEvent/StIstHitCollection.cxx
@@ -0,0 +1,95 @@
+/***************************************************************************
+*
+* $Id$
+*
+* Author: Yaping Wang, August 2013
+****************************************************************************
+* Description:
+* See header file.
+****************************************************************************
+*
+* $Log$
+* Revision 1.6  2014/03/20 20:44:36  smirnovd
+* Updated StEvent patch to include new files. The patch includes differences w.r.t. tag SL14C in CVS
+*
+* Revision 1.8  2014/03/17 20:27:57  ypwang
+* remove numOfLadder() and numOfSensor() from StIstHitCollection.h and StIstLadderHitCollection.h, respectively
+*
+* Revision 1.7  2014/03/13 22:10:21  smirnovd
+* Fixed constructor's initialization list
+*
+* Revision 1.6  2014/03/13 22:10:12  smirnovd
+* Move some constants from StIstUtil/StIstConsts.h to StEvent/StEnumerations.h to avoid external dependance of StEvent on StIstUtil
+*
+* Revision 1.5  2014/03/13 22:05:24  smirnovd
+* Style issue: Function return types on same line
+*
+* Revision 1.4  2014/02/26 21:18:08  smirnovd
+* Style corrected with astyle -s3 -p -H -A3 -k3 -O -o -y -Y -f
+*
+* Revision 1.3  2014/02/25 17:08:49  ypwang
+* add mClusteringType and its accessory/modifier functions
+*
+*
+****************************************************************************
+* StIstHitCollection.cxx,v 1.0
+* Revision 1.0 2013/11/04 15:25:30 Yaping
+* Initial version
+****************************************************************************/
+
+#include "StIstHitCollection.h"
+#include "StIstLadderHitCollection.h"
+#include "StIstSensorHitCollection.h"
+#include "StIstHit.h"
+
+static const char rcsid[] = "$Id$";
+
+ClassImp(StIstHitCollection)
+
+StIstHitCollection::StIstHitCollection() : StObject() { /* no op */ }
+
+StIstHitCollection::~StIstHitCollection() { /* no op */ }
+
+bool StIstHitCollection::addHit(StIstHit *hit)
+{
+   unsigned int l, w;
+   l = (unsigned int)hit->getLadder() - 1;
+   w = (unsigned int)hit->getSensor() - 1;
+
+   if (hit &&
+         l < kIstNumLadders &&
+         w < kIstNumSensorsPerLadder) {
+      mLadders[l].sensor(w)->hits().push_back(hit);
+      return kTRUE;
+   }
+   else {
+      return kFALSE;
+   }
+}
+
+unsigned int StIstHitCollection::numberOfHits() const
+{
+   unsigned int sum = 0;
+
+   for (unsigned int i = 0; i < kIstNumLadders; i++)
+      for (unsigned int j = 0; j < kIstNumSensorsPerLadder; j++)
+         sum += mLadders[i].sensor(j)->hits().size();
+
+   return sum;
+}
+
+unsigned char StIstHitCollection::getClusteringType() const {   return mClusteringType; }
+void StIstHitCollection::setClusteringType(unsigned char clusteringType) {   mClusteringType = clusteringType; }
+
+StIstLadderHitCollection* StIstHitCollection::ladder(unsigned int i)
+{
+   if (i < kIstNumLadders)
+      return &(mLadders[i]);
+   else
+      return 0;
+}
+
+const StIstLadderHitCollection* StIstHitCollection::ladder(unsigned int i) const
+{
+   if (i < kIstNumLadders)
+      return &(mLadders[i]);
+   else
+      return 0;
+}
diff --git a/StEvent/StIstHitCollection.h b/StEvent/StIstHitCollection.h
new file mode 100644
index 0000000..68c3ee8
--- /dev/null
+++ b/StEvent/StIstHitCollection.h
@@ -0,0 +1,69 @@
+/***************************************************************************
+*
+* $Id$
+*
+* Author: Yaping Wang, August 2013
+****************************************************************************
+* Description:
+* Data collection for IST hits, and is saved to StEvent.
+****************************************************************************
+*
+* $Log$
+* Revision 1.6  2014/03/20 20:44:36  smirnovd
+* Updated StEvent patch to include new files. The patch includes differences w.r.t. tag SL14C in CVS
+*
+* Revision 1.8  2014/03/17 20:27:57  ypwang
+* remove numOfLadder() and numOfSensor() from StIstHitCollection.h and StIstLadderHitCollection.h, respectively
+*
+* Revision 1.7  2014/03/13 22:17:09  smirnovd
+* Minor whitespace alignment fixes
+*
+* Revision 1.6  2014/03/13 22:10:30  smirnovd
+* Expand tabs and trim trailing whitespace
+*
+* Revision 1.5  2014/03/13 22:10:12  smirnovd
+* Move some constants from StIstUtil/StIstConsts.h to StEvent/StEnumerations.h to avoid external dependance of StEvent on StIstUtil
+*
+* Revision 1.4  2014/02/26 21:18:08  smirnovd
+* Style corrected with astyle -s3 -p -H -A3 -k3 -O -o -y -Y -f
+*
+* Revision 1.3  2014/02/25 17:08:49  ypwang
+* add mClusteringType and its accessory/modifier functions
+*
+*
+****************************************************************************
+* StIstHitCollection.h,v 1.0
+* Revision 1.0 2013/11/04 15:25:30 Yaping
+* Initial version
+****************************************************************************/
+
+#ifndef StIstHitCollection_hh
+#define StIstHitCollection_hh
+
+#include "StObject.h"
+#include "StIstLadderHitCollection.h"
+#include "StEvent/StEnumerations.h"
+
+using namespace StIstConsts;
+
+class StIstHit;
+
+class StIstHitCollection : public StObject
+{
+public:
+   StIstHitCollection();
+   ~StIstHitCollection();
+
+   bool          addHit(StIstHit *);
+   unsigned int  numberOfHits() const;
+
+   unsigned char getClusteringType() const;
+   void          setClusteringType(unsigned char clusteringType);
+
+   StIstLadderHitCollection       *ladder(unsigned int);
+   const StIstLadderHitCollection *ladder(unsigned int) const;
+
+private:
+   StIstLadderHitCollection mLadders[kIstNumLadders];
+   UChar_t mClusteringType;  // clustering algorithm type
+
+   ClassDef(StIstHitCollection, 1)
+};
+#endif
diff --git a/StEvent/StIstLadderHitCollection.cxx b/StEvent/StIstLadderHitCollection.cxx
new file mode 100644
index 0000000..18e50e6
--- /dev/null
+++ b/StEvent/StIstLadderHitCollection.cxx
@@ -0,0 +1,73 @@
+/***************************************************************************
+*
+* $Id$
+*
+* Author: Yaping Wang, August 2013
+****************************************************************************
+* Description:
+* See header file.
+****************************************************************************
+*
+* $Log$
+* Revision 1.6  2014/03/20 20:44:36  smirnovd
+* Updated StEvent patch to include new files. The patch includes differences w.r.t. tag SL14C in CVS
+*
+* Revision 1.7  2014/03/17 20:27:57  ypwang
+* remove numOfLadder() and numOfSensor() from StIstHitCollection.h and StIstLadderHitCollection.h, respectively
+*
+* Revision 1.6  2014/03/13 22:10:21  smirnovd
+* Fixed constructor's initialization list
+*
+* Revision 1.5  2014/03/13 22:10:12  smirnovd
+* Move some constants from StIstUtil/StIstConsts.h to StEvent/StEnumerations.h to avoid external dependance of StEvent on StIstUtil
+*
+* Revision 1.4  2014/03/13 22:05:25  smirnovd
+* Style issue: Function return types on same line
+*
+* Revision 1.3  2014/02/26 21:18:08  smirnovd
+* Style corrected with astyle -s3 -p -H -A3 -k3 -O -o -y -Y -f
+*
+* Revision 1.2  2014/01/29 18:25:00  ypwang
+* updating scripts
+*
+*
+****************************************************************************
+* StIstLadderHitCollection.cxx,v 1.0
+* Revision 1.0 2013/11/04 15:25:30 Yaping
+* Initial version
+****************************************************************************/
+
+#include "StIstLadderHitCollection.h"
+
+static const char rcsid[] = "$Id$";
+
+ClassImp(StIstLadderHitCollection)
+
+StIstLadderHitCollection::StIstLadderHitCollection() : StObject() { /* noop */ }
+
+StIstLadderHitCollection::~StIstLadderHitCollection() { /* noop */ }
+
+unsigned int StIstLadderHitCollection::numberOfHits() const
+{
+   unsigned int sum = 0;
+
+   for (unsigned int j = 0; j < kIstNumSensorsPerLadder; j++) {
+      sum += mSensors[j].hits().size();
+   }
+
+   return sum;
+}
+
+StIstSensorHitCollection* StIstLadderHitCollection::sensor(unsigned int i)
+{
+   if (i < kIstNumSensorsPerLadder)
+      return &(mSensors[i]);
+   else
+      return 0;
+}
+
+const StIstSensorHitCollection* StIstLadderHitCollection::sensor(unsigned int i) const
+{
+   if (i < kIstNumSensorsPerLadder)
+      return &(mSensors[i]);
+   else
+      return 0;
+}
+
diff --git a/StEvent/StIstLadderHitCollection.h b/StEvent/StIstLadderHitCollection.h
new file mode 100644
index 0000000..2372ae6
--- /dev/null
+++ b/StEvent/StIstLadderHitCollection.h
@@ -0,0 +1,56 @@
+/***************************************************************************
+*
+* $Id$
+*
+* Author: Yaping Wang, August 2013
+****************************************************************************
+* Description:
+* Data collection for IST hits, and one instance corresponds to one ladder.
+****************************************************************************
+*
+* $Log$
+* Revision 1.6  2014/03/20 20:44:36  smirnovd
+* Updated StEvent patch to include new files. The patch includes differences w.r.t. tag SL14C in CVS
+*
+* Revision 1.5  2014/03/17 20:27:57  ypwang
+* remove numOfLadder() and numOfSensor() from StIstHitCollection.h and StIstLadderHitCollection.h, respectively
+*
+* Revision 1.4  2014/03/13 22:10:12  smirnovd
+* Move some constants from StIstUtil/StIstConsts.h to StEvent/StEnumerations.h to avoid external dependance of StEvent on StIstUtil
+*
+* Revision 1.3  2014/02/26 21:18:08  smirnovd
+* Style corrected with astyle -s3 -p -H -A3 -k3 -O -o -y -Y -f
+*
+* Revision 1.2  2014/01/29 18:25:00  ypwang
+* updating scripts
+*
+*
+****************************************************************************
+* StIstLadderHitCollection.h,v 1.0
+* Revision 1.0 2013/11/04 15:25:30 Yaping
+* Initial version
+****************************************************************************/
+
+#ifndef StIstLadderHitCollection_hh
+#define StIstLadderHitCollection_hh
+
+#include "StObject.h"
+#include "StIstSensorHitCollection.h"
+#include "StEvent/StEnumerations.h"
+
+using namespace StIstConsts;
+
+class StIstLadderHitCollection : public StObject
+{
+public:
+   StIstLadderHitCollection();
+   ~StIstLadderHitCollection();
+
+   unsigned int  numberOfHits() const;
+
+   StIstSensorHitCollection       *sensor(unsigned int);
+   const StIstSensorHitCollection *sensor(unsigned int) const;
+
+private:
+   StIstSensorHitCollection  mSensors[kIstNumSensorsPerLadder];
+
+   ClassDef(StIstLadderHitCollection, 1)
+};
+#endif
diff --git a/StEvent/StIstSensorHitCollection.cxx b/StEvent/StIstSensorHitCollection.cxx
new file mode 100644
index 0000000..a6f6d6d
--- /dev/null
+++ b/StEvent/StIstSensorHitCollection.cxx
@@ -0,0 +1,53 @@
+/***************************************************************************
+*
+* $Id$
+*
+* Author: Yaping Wang, August 2013
+****************************************************************************
+* Description:
+* See header file.
+****************************************************************************
+*
+* $Log$
+* Revision 1.6  2014/03/20 20:44:36  smirnovd
+* Updated StEvent patch to include new files. The patch includes differences w.r.t. tag SL14C in CVS
+*
+* Revision 1.6  2014/03/13 22:10:36  smirnovd
+* Collapse vector after clean up
+*
+* Revision 1.5  2014/03/13 22:10:21  smirnovd
+* Fixed constructor's initialization list
+*
+* Revision 1.4  2014/03/13 22:05:25  smirnovd
+* Style issue: Function return types on same line
+*
+* Revision 1.3  2014/02/26 21:18:08  smirnovd
+* Style corrected with astyle -s3 -p -H -A3 -k3 -O -o -y -Y -f
+*
+* Revision 1.2  2014/01/29 18:25:00  ypwang
+* updating scripts
+*
+*
+****************************************************************************
+* StIstSensorHitCollection.cxx,v 1.0
+* Revision 1.0 2013/11/04 15:25:30 Yaping
+* Initial version
+****************************************************************************/
+
+#include "StIstSensorHitCollection.h"
+#include "StIstHit.h"
+
+static const char rcsid[] = "$Id$";
+
+ClassImp(StIstSensorHitCollection)
+
+StIstSensorHitCollection::StIstSensorHitCollection() : StObject() { /* noop */ }
+
+StIstSensorHitCollection::~StIstSensorHitCollection()
+{
+   for (unsigned int i = 0; i < mHits.size(); i++)
+      delete mHits[i];
+
+   mHits.clear();
+}
+
+const StSPtrVecIstHit & StIstSensorHitCollection::hits() const { return mHits; }
+
+StSPtrVecIstHit & StIstSensorHitCollection::hits() { return mHits; }
diff --git a/StEvent/StIstSensorHitCollection.h b/StEvent/StIstSensorHitCollection.h
new file mode 100644
index 0000000..ef9d5aa
--- /dev/null
+++ b/StEvent/StIstSensorHitCollection.h
@@ -0,0 +1,47 @@
+/***************************************************************************
+*
+* $Id$
+*
+* Author: Yaping Wang, August 2013
+****************************************************************************
+* Description:
+* Data collection for IST hits, and one instance corresponds to one sensor.
+****************************************************************************
+*
+* $Log$
+* Revision 1.6  2014/03/20 20:44:36  smirnovd
+* Updated StEvent patch to include new files. The patch includes differences w.r.t. tag SL14C in CVS
+*
+* Revision 1.3  2014/02/26 21:18:08  smirnovd
+* Style corrected with astyle -s3 -p -H -A3 -k3 -O -o -y -Y -f
+*
+* Revision 1.2  2014/01/29 18:25:00  ypwang
+* updating scripts
+*
+*
+****************************************************************************
+* StIstSensorHitCollection.h,v 1.0
+* Revision 1.0 2013/11/04 15:25:30 Yaping
+* Initial version
+****************************************************************************/
+
+#ifndef StIstSensorHitCollection_hh
+#define StIstSensorHitCollection_hh
+
+#include "StObject.h"
+#include "StContainers.h"
+
+class StIstHit;
+
+class StIstSensorHitCollection : public StObject
+{
+public:
+   StIstSensorHitCollection();
+   ~StIstSensorHitCollection();
+
+   StSPtrVecIstHit       &hits();
+   const StSPtrVecIstHit &hits() const;
+
+private:
+   StSPtrVecIstHit mHits;
+
+   ClassDef(StIstSensorHitCollection, 1)
+};
+#endif
-- 
1.8.2.GIT


From 8d664758888ce74c651b62409829d7debf548667 Mon Sep 17 00:00:00 2001
From: Dmitri Smirnov <d.s@plexoos.com>
Date: Thu, 20 Mar 2014 14:15:39 -0400
Subject: [PATCH 2/2] IST related patches for StEvent files

---
 StEvent/StContainers.cxx           |  3 ++-
 StEvent/StContainers.h             |  3 ++-
 StEvent/StEnumerations.h           | 11 +++++++++++
 StEvent/StEvent.cxx                | 25 +++++++++++++++++++++++++
 StEvent/StEvent.h                  |  4 ++++
 StEvent/StEventClusteringHints.cxx |  2 ++
 StEvent/StEventLinkDef.h           |  1 +
 StEvent/StEventTypes.h             |  5 ++++-
 8 files changed, 51 insertions(+), 3 deletions(-)

diff --git a/StEvent/StContainers.cxx b/StEvent/StContainers.cxx
index d75f0ca..cd83ae0 100644
--- a/StEvent/StContainers.cxx
+++ b/StEvent/StContainers.cxx
@@ -149,6 +149,7 @@
 #include "StFgtPoint.h"
 #include "StFgtHit.h"
 #include "StPxlHit.h"
+#include "StIstHit.h"
 
 StCollectionImp(Object)
 StCollectionImp(CalibrationVertex)
@@ -206,4 +207,4 @@ StCollectionImp(FgtHit)
 StCollectionImp(FgtStrip)
 StCollectionImp(FgtPoint)
 StCollectionImp(PxlHit)
-
+StCollectionImp(IstHit)
diff --git a/StEvent/StContainers.h b/StEvent/StContainers.h
index b5e840a..2207e0f 100644
--- a/StEvent/StContainers.h
+++ b/StEvent/StContainers.h
@@ -165,6 +165,7 @@ class StHltTriggerReason;
 class StFgtStrip;
 class StFgtHit;
 class StFgtPoint;
+class StIstHit;
 
 StCollectionDef(Object)
 StCollectionDef(BTofHit)
@@ -222,6 +223,6 @@ StCollectionDef(HltTriggerReason)
 StCollectionDef(FgtHit)
 StCollectionDef(FgtStrip)
 StCollectionDef(FgtPoint)
-
+StCollectionDef(IstHit)
 
 #endif
diff --git a/StEvent/StEnumerations.h b/StEvent/StEnumerations.h
index 434cf75..9ca3c16 100644
--- a/StEvent/StEnumerations.h
+++ b/StEvent/StEnumerations.h
@@ -527,6 +527,17 @@ enum StFgtClusterSeedType {
     kFgtKeepStrip
 };
 
+/** For more IST related constants see StRoot/StIstUtil/StistConsts.h */
+namespace StIstConsts
+{
+   const int kIstNumLadders = 24;          ///< 24 IST Ladders
+   const int kIstNumSensorsPerLadder = 6;  ///< 6 sensor per one IST Ladder
+   const int kIstNumSensors = 144;         ///< 144 sensors
+   const int kIstNumPadsPerSensor = 768;   ///< 768 pads in each sensor
+   const int kIstNumRowsPerSensor = 64;    ///< 64 rows in r-phi direction per each sensor
+   const int kIstNumColumnsPerSensor = 12; ///< 12 columns in beam direction per each sensor
+}
+
 const char *detectorNameById(StDetectorId id);
 StDetectorId detectorIdByName(const char *name);
 #endif
diff --git a/StEvent/StEvent.cxx b/StEvent/StEvent.cxx
index 9409504..5329416 100644
--- a/StEvent/StEvent.cxx
+++ b/StEvent/StEvent.cxx
@@ -221,6 +221,7 @@
 #include "StHltEvent.h"
 #include "StFgtCollection.h"
 #include "StPxlHitCollection.h"
+#include "StIstHitCollection.h"
 #include "StTrackNode.h"
 #include "StTrack.h"
 
@@ -779,6 +780,22 @@ StEvent::fgtCollection() const
     return fgtCollection;
 }
 
+StIstHitCollection*
+StEvent::istHitCollection()
+{
+    StIstHitCollection *istHitCollection = 0;
+    _lookup(istHitCollection, mContent);
+    return istHitCollection;
+}
+
+const StIstHitCollection*
+StEvent::istHitCollection() const
+{
+    StIstHitCollection *istHitCollection = 0;
+    _lookup(istHitCollection, mContent);
+    return istHitCollection;
+}
+
 StPxlHitCollection*
 StEvent::pxlHitCollection()
 {
@@ -1228,6 +1245,12 @@ StEvent::setFgtCollection(StFgtCollection* val)
 }
 
 void
+StEvent::setIstHitCollection(StIstHitCollection* val)
+{
+    _lookupAndSet(val, mContent);
+}
+
+void
 StEvent::setPxlHitCollection(StPxlHitCollection* val)
 {
     _lookupAndSet(val, mContent);
@@ -1341,6 +1364,7 @@ void StEvent::statistics()
     cout << "\tStFtpcHitCollection:         " << static_cast<void*>(ftpcHitCollection());
     cout << "\tStSvtHitCollection:          " << static_cast<void*>(svtHitCollection());
     cout << "\tStSsdHitCollection:          " << static_cast<void*>(ssdHitCollection());
+    cout << "\tStIstHitCollection:          " << static_cast<void*>(istHitCollection());
     cout << "\tStPxlHitCollection:          " << static_cast<void*>(pxlHitCollection());
     cout << "\tStEmcCollection:             " << static_cast<void*>(emcCollection());
     cout << "\tStFmsCollection:             " << static_cast<void*>(fmsCollection());
@@ -1366,6 +1390,7 @@ void StEvent::statistics()
     cout << "\t# of FTPC hits:              " << (ftpcHitCollection() ? ftpcHitCollection()->numberOfHits() : 0) << endl;
     cout << "\t# of SVT hits:               " << (svtHitCollection() ? svtHitCollection()->numberOfHits() : 0) << endl;
     cout << "\t# of SSD hits:               " << (ssdHitCollection() ? ssdHitCollection()->numberOfHits() : 0) << endl;
+    cout << "\t# of IST hits:               " << (istHitCollection() ? istHitCollection()->numberOfHits() : 0) << endl;
     cout << "\t# of PXL hits:               " << (pxlHitCollection() ? pxlHitCollection()->numberOfHits() : 0) << endl;
     cout << "\t# of track nodes:            " << trackNodes().size() << endl;
     cout << "\t# of primary tracks:         " << (primaryVertex(0) ? primaryVertex(0)->numberOfDaughters() : 0) << endl;
diff --git a/StEvent/StEvent.h b/StEvent/StEvent.h
index 2cf9e93..6544814 100644
--- a/StEvent/StEvent.h
+++ b/StEvent/StEvent.h
@@ -200,6 +200,7 @@ class StRnDHitCollection;
 class StHltEvent;
 class StFgtCollection;
 class StPxlHitCollection;
+class StIstHitCollection;
 
 class StEvent : public StXRefMain {
 public:
@@ -261,6 +262,8 @@ public:
     const StFgtCollection*              fgtCollection() const;
     StPxlHitCollection*                 pxlHitCollection();
     const StPxlHitCollection*           pxlHitCollection() const;
+    StIstHitCollection*                 istHitCollection();
+    const StIstHitCollection*           istHitCollection() const;
     
     StL0Trigger*                        l0Trigger();
     const StL0Trigger*                  l0Trigger() const;
@@ -331,6 +334,7 @@ public:
     void setSvtHitCollection(StSvtHitCollection*);
     void setSsdHitCollection(StSsdHitCollection*);
     void setPxlHitCollection(StPxlHitCollection*);
+    void setIstHitCollection(StIstHitCollection*);
     void setEmcCollection(StEmcCollection*);
     void setFmsCollection(StFmsCollection*);
     void setRichCollection(StRichCollection*);
diff --git a/StEvent/StEventClusteringHints.cxx b/StEvent/StEventClusteringHints.cxx
index e1e8361..5489294 100755
--- a/StEvent/StEventClusteringHints.cxx
+++ b/StEvent/StEventClusteringHints.cxx
@@ -162,6 +162,7 @@ StEventClusteringHints::StEventClusteringHints()
     setBranch("StRpsCollection",             "evt_aux",      7);
     setBranch("StSsdHitCollection",          "evt_hits",     8);
     setBranch("StSvtHitCollection",          "evt_hits",     8);
+    setBranch("StIstHitCollection",          "evt_hits",     8);
     setBranch("StPxlHitCollection",          "evt_hits",     8);
     setBranch("StTpcHitCollection",          "evt_hits",     8);
     setBranch("StFtpcHitCollection",         "evt_hits",     8);
@@ -185,6 +186,7 @@ StEventClusteringHints::StEventClusteringHints()
     setBranch("StRpsCollection",             "event", 1);
     setBranch("StSsdHitCollection",          "event", 1);
     setBranch("StSvtHitCollection",          "event", 1);
+    setBranch("StIstHitCollection",          "event", 1);
     setBranch("StPxlHitCollection",          "event", 1);
     setBranch("StTpcHitCollection",          "event", 1);
     setBranch("StFtpcHitCollection",         "event", 1);
diff --git a/StEvent/StEventLinkDef.h b/StEvent/StEventLinkDef.h
index 60e6b3e..400ea00 100644
--- a/StEvent/StEventLinkDef.h
+++ b/StEvent/StEventLinkDef.h
@@ -149,6 +149,7 @@
 #pragma link C++ class TrgOfflen2013+;
 
 #pragma link C++ function operator<<(ostream&, const StPxlHit&);        
+#pragma link C++ function operator<<(ostream&, const StIstHit&); 
 #pragma link C++ function operator<<(ostream&, const StTpcPixel&);        
 #pragma link C++ function operator<<(ostream&, const StMeasuredPoint&);        
 #pragma link C++ function operator<<(ostream&, const StHit&);        
diff --git a/StEvent/StEventTypes.h b/StEvent/StEventTypes.h
index 5ad4e81..52618a9 100644
--- a/StEvent/StEventTypes.h
+++ b/StEvent/StEventTypes.h
@@ -278,5 +278,8 @@
 #include "StFgtHitCollection.h"
 #include "StFgtPoint.h"
 #include "StFgtPointCollection.h"
- 
+#include "StIstHit.h"
+#include "StIstSensorHitCollection.h" 
+#include "StIstLadderHitCollection.h"
+#include "StIstHitCollection.h"
 #endif
-- 
1.8.2.GIT

